import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isWeb, useIsomorphicLayoutEffect } from "@tamagui/constants";
import { Slottable, View, isTamaguiElement, styled } from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { Dialog, DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogOverlayFrame, DialogPortal, DialogTitle, DialogTrigger, DialogWarningProvider, createDialogScope } from "@tamagui/dialog";
import { composeEventHandlers, withStaticProperties } from "@tamagui/helpers";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
import { Alert } from "react-native";
var ROOT_NAME = "AlertDialog", [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [
  createDialogScope
]), useDialogScope = createDialogScope(), TRIGGER_NAME = "AlertDialogTrigger", NativeAlertDialogTriggerFrame = styled(View, {
  name: TRIGGER_NAME
}), AlertDialogTrigger = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  if (props.__native) {
    var { __native, onPress, __onPress, ...rest } = props;
    return /* @__PURE__ */ _jsx(NativeAlertDialogTriggerFrame, {
      ...rest,
      onPress: composeEventHandlers(onPress, __onPress)
    });
  }
  var { __scopeAlertDialog, ...triggerProps } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ _jsx(DialogTrigger, {
    ...dialogScope,
    ...triggerProps,
    ref: forwardedRef
  });
});
AlertDialogTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "AlertDialogPortal", AlertDialogPortal = function(props) {
  var { __scopeAlertDialog, ...portalProps } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ _jsx(DialogPortal, {
    ...dialogScope,
    ...portalProps
  });
};
AlertDialogPortal.displayName = PORTAL_NAME;
var OVERLAY_NAME = "AlertDialogOverlay", AlertDialogOverlayFrame = styled(DialogOverlayFrame, {
  name: OVERLAY_NAME
}), AlertDialogOverlay = AlertDialogOverlayFrame.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopeAlertDialog, ...overlayProps } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ _jsx(DialogOverlay, {
    ...dialogScope,
    ...overlayProps,
    ref: forwardedRef
  });
}));
AlertDialogOverlay.displayName = OVERLAY_NAME;
var CONTENT_NAME = "AlertDialogContent", [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME), AlertDialogContent = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopeAlertDialog, children, ...contentProps } = props, dialogScope = useDialogScope(__scopeAlertDialog), contentRef = React.useRef(null), composedRefs = useComposedRefs(forwardedRef, contentRef), cancelRef = React.useRef(null);
  return /* @__PURE__ */ _jsx(DialogWarningProvider, {
    contentName: CONTENT_NAME,
    titleName: TITLE_NAME,
    docsSlug: "alert-dialog",
    children: /* @__PURE__ */ _jsx(AlertDialogContentProvider, {
      scope: __scopeAlertDialog,
      cancelRef,
      children: /* @__PURE__ */ _jsxs(DialogContent, {
        // @ts-ignore
        role: "alertdialog",
        ...dialogScope,
        ...contentProps,
        ref: composedRefs,
        onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, function(event) {
          if (event.preventDefault(), isWeb) {
            var _cancelRef_current;
            (_cancelRef_current = cancelRef.current) === null || _cancelRef_current === void 0 || _cancelRef_current.focus({
              preventScroll: !0
            });
          }
        }),
        onPointerDownOutside: function(event) {
          return event.preventDefault();
        },
        onInteractOutside: function(event) {
          return event.preventDefault();
        },
        children: [
          /**
          * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`
          * around everything, otherwise the `DescriptionWarning` would be rendered straight away.
          * This is because we want the accessibility checks to run only once the content is actually
          * open and that behaviour is already encapsulated in `DialogContent`.
          */
          /* @__PURE__ */ _jsx(Slottable, {
            children
          }),
          process.env.NODE_ENV === "development" && /* @__PURE__ */ _jsx(DescriptionWarning, {
            contentRef
          })
        ]
      })
    })
  });
});
AlertDialogContent.displayName = CONTENT_NAME;
var TITLE_NAME = "AlertDialogTitle", AlertDialogTitle = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopeAlertDialog, ...titleProps } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ _jsx(DialogTitle, {
    ...dialogScope,
    ...titleProps,
    ref: forwardedRef
  });
});
AlertDialogTitle.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "AlertDialogDescription", AlertDialogDescription = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopeAlertDialog, ...descriptionProps } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ _jsx(DialogDescription, {
    ...dialogScope,
    ...descriptionProps,
    ref: forwardedRef
  });
});
AlertDialogDescription.displayName = DESCRIPTION_NAME;
var ACTION_NAME = "AlertDialogAction", AlertDialogAction = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopeAlertDialog, ...actionProps } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ _jsx(DialogClose, {
    ...dialogScope,
    ...actionProps,
    ref: forwardedRef
  });
});
AlertDialogAction.displayName = ACTION_NAME;
var CANCEL_NAME = "AlertDialogCancel", AlertDialogCancel = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopeAlertDialog, ...cancelProps } = props, { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog), dialogScope = useDialogScope(__scopeAlertDialog), ref = useComposedRefs(forwardedRef, cancelRef);
  return /* @__PURE__ */ _jsx(DialogClose, {
    ...dialogScope,
    ...cancelProps,
    ref
  });
});
AlertDialogCancel.displayName = CANCEL_NAME;
var DescriptionWarning = function(param) {
  var { contentRef } = param;
  return process.env.NODE_ENV === "development" && React.useEffect(function() {
    var _contentRef_current;
    if (isWeb) {
      var hasDescription = document.getElementById((_contentRef_current = contentRef.current) === null || _contentRef_current === void 0 ? void 0 : _contentRef_current.getAttribute("aria-describedby"));
      hasDescription || console.warn(`\`${CONTENT_NAME}\` requires a description for the component to be accessible for screen reader users.
  
        You can add a description to the \`${CONTENT_NAME}\` by passing a \`${DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.
        
        Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.
        
        For more information, see https://tamagui.dev/docs/components/alert-dialog`);
    }
  }, [
    contentRef
  ]), null;
}, AlertDialogInner = function(props) {
  var { __scopeAlertDialog, native, ...alertDialogProps } = props, dialogScope = useDialogScope(__scopeAlertDialog), [open, setOpen] = useControllableState({
    prop: props.open,
    defaultProp: props.defaultOpen || !1,
    onChange: props.onOpenChange,
    transition: !0
  }), triggerElement = null, title = "", description = "", buttons = [];
  return forEachChildDeep(React.Children.toArray(props.children), function(child) {
    if (!/* @__PURE__ */ React.isValidElement(child)) return !1;
    var name = isTamaguiElement(child) ? child.type.staticConfig.componentName : child.type.displayName;
    switch (name) {
      case TRIGGER_NAME:
        return triggerElement = /* @__PURE__ */ React.cloneElement(child, {
          __native: !0
        }), !1;
      case TITLE_NAME:
        return title = getStringChildren(child), !1;
      case DESCRIPTION_NAME:
        return description = getStringChildren(child), !1;
      case ACTION_NAME:
      case CANCEL_NAME: {
        var style = name === ACTION_NAME ? "default" : "cancel", text = getStringChildren(child), onPress = function() {
          var _childProps_onPress, childProps = child.props;
          childProps == null || (_childProps_onPress = childProps.onPress) === null || _childProps_onPress === void 0 || _childProps_onPress.call(childProps, {
            native: !0
          }), setOpen(!1);
        };
        return buttons.push({
          style,
          text,
          // @ts-ignore
          onPress
        }), !1;
      }
      default:
        return !0;
    }
  }), useIsomorphicLayoutEffect(function() {
    !open || !native || (title || description) && Alert.alert(title, description, buttons);
  }, [
    native,
    open
  ]), native ? /* @__PURE__ */ React.cloneElement(triggerElement, {
    __onPress: function() {
      setOpen(!0);
    }
  }) : /* @__PURE__ */ _jsx(Dialog, {
    ...dialogScope,
    ...alertDialogProps,
    modal: !0
  });
};
function forEachChildDeep(children, onChild) {
  var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var child = _step.value;
      /* @__PURE__ */ React.isValidElement(child) && onChild(child) && child.props.children && forEachChildDeep(React.Children.toArray(child.props.children), onChild);
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
}
function getStringChildren(child) {
  var string = "";
  return forEachChildDeep(React.Children.toArray(child), function(child2) {
    return typeof child2.props.children == "string" ? (string = child2.props.children, !1) : !0;
  }), string;
}
var AlertDialog = withStaticProperties(AlertDialogInner, {
  Trigger: AlertDialogTrigger,
  Portal: AlertDialogPortal,
  Overlay: AlertDialogOverlay,
  Content: AlertDialogContent,
  Action: AlertDialogAction,
  Cancel: AlertDialogCancel,
  Title: AlertDialogTitle,
  Description: AlertDialogDescription
});
AlertDialog.displayName = ROOT_NAME;
export {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogOverlay,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
  createAlertDialogScope
};
//# sourceMappingURL=AlertDialog.js.map
