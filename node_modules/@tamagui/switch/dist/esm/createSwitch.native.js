import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Stack, composeEventHandlers, isWeb, shouldRenderNativePlatform, useProps, withStaticProperties } from "@tamagui/core";
import { registerFocusable } from "@tamagui/focusable";
import { useSwitch } from "@tamagui/switch-headless";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
import { Switch as NativeSwitch } from "react-native";
import { SwitchStyledContext } from "./StyledContext";
import { SwitchFrame as DefaultSwitchFrame, SwitchThumb } from "./Switch";
var SwitchContext = /* @__PURE__ */ React.createContext({
  checked: !1,
  disabled: !1,
  frameWidth: 0
});
function createSwitch(createProps) {
  var { disableActiveTheme, Frame = DefaultSwitchFrame, Thumb = SwitchThumb } = createProps;
  process.env.NODE_ENV === "development" && (Frame !== DefaultSwitchFrame && Frame.staticConfig.context && Frame.staticConfig.context !== SwitchStyledContext || Thumb !== SwitchThumb && Thumb.staticConfig.context && Thumb.staticConfig.context !== SwitchStyledContext) && console.warn("Warning: createSwitch() needs to control context to pass checked state from Frame to Thumb, any custom context passed will be overridden."), Frame.staticConfig.context = SwitchStyledContext, Thumb.staticConfig.context = SwitchStyledContext;
  var SwitchThumbComponent = Thumb.styleable(function(props, forwardedRef) {
    var { size: sizeProp, unstyled: unstyledProp, nativeID, ...thumbProps } = props, context = React.useContext(SwitchContext), { checked, disabled, frameWidth } = context, styledContext = SwitchStyledContext.useStyledContext(), { unstyled: unstyledContext, size: sizeContext } = styledContext, _ref, unstyled = process.env.TAMAGUI_HEADLESS === "1" ? !0 : (_ref = unstyledProp ?? unstyledContext) !== null && _ref !== void 0 ? _ref : !1, _ref1, size = (_ref1 = sizeProp ?? sizeContext) !== null && _ref1 !== void 0 ? _ref1 : "$true", initialChecked = React.useRef(checked).current, [thumbWidth, setThumbWidth] = React.useState(0), distance = frameWidth - thumbWidth, x = initialChecked ? checked ? 0 : -distance : checked ? distance : 0;
    return /* @__PURE__ */ _jsx(Thumb, {
      ref: forwardedRef,
      unstyled,
      ...unstyled === !1 && {
        size,
        ...!disableActiveTheme && !unstyled && {
          theme: checked ? "active" : null
        }
      },
      alignSelf: initialChecked ? "flex-end" : "flex-start",
      x,
      // TODO: remove ViewProps cast
      onLayout: composeEventHandlers(props.onLayout, function(e) {
        return setThumbWidth(e.nativeEvent.layout.width);
      }),
      // expected variants
      checked,
      disabled,
      ...thumbProps
    });
  }), SwitchComponent = Frame.styleable(function(_props, forwardedRef) {
    var { native, nativeProps, checked: checkedProp, defaultChecked, onCheckedChange, ...props } = _props, [checked, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked || !1,
      onChange: onCheckedChange,
      transition: !0
    }), styledContext = React.useContext(SwitchStyledContext.context), [frameWidth, setFrameWidth] = React.useState(0), propsActive = useProps(props, {
      noNormalize: !0,
      noExpand: !0,
      resolveValues: "none",
      forComponent: Frame
    }), _styledContext_size, _ref, _styledContext_unstyled, _ref1, { switchProps, bubbleInput, switchRef } = useSwitch(
      // @ts-ignore
      Object.assign({
        size: (_ref = (_styledContext_size = styledContext.size) !== null && _styledContext_size !== void 0 ? _styledContext_size : props.size) !== null && _ref !== void 0 ? _ref : "$true",
        unstyled: (_ref1 = (_styledContext_unstyled = styledContext.unstyled) !== null && _styledContext_unstyled !== void 0 ? _styledContext_unstyled : props.unstyled) !== null && _ref1 !== void 0 ? _ref1 : !1
      }, propsActive),
      [
        checked,
        setChecked
      ],
      forwardedRef
    );
    React.useEffect(function() {
      if (props.id && !props.disabled)
        return registerFocusable(props.id, {
          focusAndSelect: function() {
            setChecked?.(function(value) {
              return !value;
            });
          },
          focus: function() {
          }
        });
    }, [
      props.id,
      props.disabled
    ]);
    var renderNative = shouldRenderNativePlatform(native);
    return renderNative === "android" || renderNative === "ios" ? /* @__PURE__ */ _jsx(NativeSwitch, {
      value: checked,
      onValueChange: setChecked,
      ...nativeProps
    }) : /* @__PURE__ */ _jsxs(SwitchContext.Provider, {
      value: {
        checked,
        disabled: switchProps.disabled,
        frameWidth
      },
      children: [
        /* @__PURE__ */ _jsx(Frame, {
          ref: switchRef,
          tag: "button",
          ...isWeb && {
            type: "button"
          },
          ...switchProps,
          ...!disableActiveTheme && !props.unstyled && {
            theme: checked ? "active" : null,
            themeShallow: !0
          },
          // expected variants
          checked,
          disabled: switchProps.disabled,
          children: /* @__PURE__ */ _jsx(Stack, {
            alignSelf: "stretch",
            flex: 1,
            onLayout: function(e) {
              setFrameWidth(e.nativeEvent.layout.width);
            },
            children: switchProps.children
          })
        }),
        bubbleInput
      ]
    });
  }, {
    disableTheme: !0
  });
  return withStaticProperties(SwitchComponent, {
    Thumb: SwitchThumbComponent
  });
}
export {
  SwitchContext,
  createSwitch
};
//# sourceMappingURL=createSwitch.js.map
