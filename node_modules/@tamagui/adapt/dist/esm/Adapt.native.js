import { jsx as _jsx } from "react/jsx-runtime";
import { isAndroid, isIos, isTouchable, isWeb, useIsomorphicLayoutEffect } from "@tamagui/constants";
import { createStyledContext, useMedia } from "@tamagui/core";
import { withStaticProperties } from "@tamagui/helpers";
import { PortalHost, PortalItem } from "@tamagui/portal";
import React, { createContext, useContext, useEffect, useId } from "react";
var CurrentAdaptContextScope = /* @__PURE__ */ createContext(""), AdaptContext = createStyledContext({
  Contents: null,
  scopeName: "",
  portalName: "",
  platform: null,
  setPlatform: null,
  when: null,
  setChildren: null,
  setWhen: null
}), ProvideAdaptContext = function(param) {
  var { children, ...context } = param, scope = context.scopeName || "";
  return /* @__PURE__ */ _jsx(CurrentAdaptContextScope.Provider, {
    value: scope,
    children: /* @__PURE__ */ _jsx(AdaptContext.Provider, {
      scope,
      ...context,
      children
    })
  });
}, useAdaptContext = function() {
  var scope = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", contextScope = useContext(CurrentAdaptContextScope), context = AdaptContext.useStyledContext(scope === "" && contextScope || scope);
  return context;
}, AdaptPortals = /* @__PURE__ */ new Map(), AdaptParent = function(param) {
  var { children, Contents, scope, portal } = param, portalName = `AdaptPortal${scope}`, id = useId(), FinalContents = Contents || AdaptPortals.get(id);
  FinalContents || (FinalContents = function() {
    return /* @__PURE__ */ _jsx(PortalHost, {
      name: portalName,
      forwardProps: typeof portal == "boolean" ? void 0 : portal?.forwardProps
    });
  }, AdaptPortals.set(id, FinalContents)), useEffect(function() {
    return function() {
      AdaptPortals.delete(id);
    };
  }, []);
  var [when, setWhen] = React.useState(null), [platform, setPlatform] = React.useState(null), [children2, setChildren] = React.useState(null);
  return /* @__PURE__ */ _jsx(ProvideAdaptContext, {
    Contents: FinalContents,
    when,
    platform,
    setPlatform,
    setWhen,
    setChildren,
    portalName,
    scopeName: scope,
    children
  });
}, AdaptContents = function(param) {
  var { scope, ...rest } = param, context = useAdaptContext(scope);
  if (!context?.Contents)
    throw new Error(process.env.NODE_ENV === "production" ? "tamagui.dev/docs/intro/errors#warning-002" : "You're rendering a Tamagui <Adapt /> component without nesting it inside a parent that is able to adapt.");
  return /* @__PURE__ */ React.createElement(context.Contents, {
    ...rest,
    key: "stable"
  });
};
AdaptContents.shouldForwardSpace = !0;
var Adapt = withStaticProperties(function(props) {
  var { platform, when, children, scope } = props, context = useAdaptContext(scope), scopeName = scope ?? context.scopeName, enabled = useAdaptIsActiveGiven(props);
  useIsomorphicLayoutEffect(function() {
    context?.setWhen(when || enabled), context?.setPlatform(platform || null);
  }, [
    when,
    platform,
    context,
    enabled
  ]), useIsomorphicLayoutEffect(function() {
    return function() {
      context?.setWhen(null);
    };
  }, []);
  var output;
  if (typeof children == "function") {
    var Component = context?.Contents;
    output = children(Component ? /* @__PURE__ */ _jsx(Component, {}) : null);
  } else
    output = children;
  return useEffect(function() {
    typeof children == "function" && output !== void 0 && context?.setChildren(output);
  }, [
    output
  ]), /* @__PURE__ */ _jsx(CurrentAdaptContextScope.Provider, {
    value: scopeName,
    children: enabled ? output : null
  });
}, {
  Contents: AdaptContents
}), AdaptPortalContents = function(props) {
  var { portalName } = useAdaptContext(props.scope);
  return /* @__PURE__ */ _jsx(PortalItem, {
    // passthrough={!isWeb && !isActive}
    hostName: portalName,
    children: props.children
  });
}, useAdaptIsActiveGiven = function(param) {
  var { when, platform } = param, media = useMedia();
  if (when == null && platform == null)
    return !1;
  var enabled = !1;
  return platform === "touch" ? enabled = isTouchable : platform === "native" ? enabled = !isWeb : platform === "web" ? enabled = isWeb : platform === "ios" ? enabled = isIos : platform === "android" && (enabled = isAndroid), platform && enabled == !1 ? !1 : (when && typeof when == "string" && (enabled = media[when]), enabled);
}, useAdaptIsActive = function(scope) {
  var props = useAdaptContext(scope);
  return useAdaptIsActiveGiven(props);
};
export {
  Adapt,
  AdaptContents,
  AdaptContext,
  AdaptParent,
  AdaptPortalContents,
  ProvideAdaptContext,
  useAdaptContext,
  useAdaptIsActive
};
//# sourceMappingURL=Adapt.js.map
