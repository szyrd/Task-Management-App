"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Adapt_exports = {};
__export(Adapt_exports, {
  Adapt: () => Adapt,
  AdaptContents: () => AdaptContents,
  AdaptContext: () => AdaptContext,
  AdaptParent: () => AdaptParent,
  AdaptPortalContents: () => AdaptPortalContents,
  ProvideAdaptContext: () => ProvideAdaptContext,
  useAdaptContext: () => useAdaptContext,
  useAdaptIsActive: () => useAdaptIsActive
});
module.exports = __toCommonJS(Adapt_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_helpers = require("@tamagui/helpers"), import_portal = require("@tamagui/portal"), import_react = __toESM(require("react")), CurrentAdaptContextScope = /* @__PURE__ */ (0, import_react.createContext)(""), AdaptContext = (0, import_core.createStyledContext)({
  Contents: null,
  scopeName: "",
  portalName: "",
  platform: null,
  setPlatform: null,
  when: null,
  setChildren: null,
  setWhen: null
}), ProvideAdaptContext = function(param) {
  var { children, ...context } = param, scope = context.scopeName || "";
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CurrentAdaptContextScope.Provider, {
    value: scope,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AdaptContext.Provider, {
      scope,
      ...context,
      children
    })
  });
}, useAdaptContext = function() {
  var scope = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", contextScope = (0, import_react.useContext)(CurrentAdaptContextScope), context = AdaptContext.useStyledContext(scope === "" && contextScope || scope);
  return context;
}, AdaptPortals = /* @__PURE__ */ new Map(), AdaptParent = function(param) {
  var { children, Contents, scope, portal } = param, portalName = `AdaptPortal${scope}`, id = (0, import_react.useId)(), FinalContents = Contents || AdaptPortals.get(id);
  FinalContents || (FinalContents = function() {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_portal.PortalHost, {
      name: portalName,
      forwardProps: typeof portal == "boolean" || portal == null ? void 0 : portal.forwardProps
    });
  }, AdaptPortals.set(id, FinalContents)), (0, import_react.useEffect)(function() {
    return function() {
      AdaptPortals.delete(id);
    };
  }, []);
  var [when, setWhen] = import_react.default.useState(null), [platform, setPlatform] = import_react.default.useState(null), [children2, setChildren] = import_react.default.useState(null);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ProvideAdaptContext, {
    Contents: FinalContents,
    when,
    platform,
    setPlatform,
    setWhen,
    setChildren,
    portalName,
    scopeName: scope,
    children
  });
}, AdaptContents = function(param) {
  var { scope, ...rest } = param, context = useAdaptContext(scope);
  if (!(context != null && context.Contents))
    throw new Error(process.env.NODE_ENV === "production" ? "tamagui.dev/docs/intro/errors#warning-002" : "You're rendering a Tamagui <Adapt /> component without nesting it inside a parent that is able to adapt.");
  return /* @__PURE__ */ import_react.default.createElement(context.Contents, {
    ...rest,
    key: "stable"
  });
};
AdaptContents.shouldForwardSpace = !0;
var Adapt = (0, import_helpers.withStaticProperties)(function(props) {
  var { platform, when, children, scope } = props, context = useAdaptContext(scope), scopeName = scope ?? context.scopeName, enabled = useAdaptIsActiveGiven(props);
  (0, import_constants.useIsomorphicLayoutEffect)(function() {
    context == null || context.setWhen(when || enabled), context == null || context.setPlatform(platform || null);
  }, [
    when,
    platform,
    context,
    enabled
  ]), (0, import_constants.useIsomorphicLayoutEffect)(function() {
    return function() {
      context == null || context.setWhen(null);
    };
  }, []);
  var output;
  if (typeof children == "function") {
    var Component = context == null ? void 0 : context.Contents;
    output = children(Component ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {}) : null);
  } else
    output = children;
  return (0, import_react.useEffect)(function() {
    typeof children == "function" && output !== void 0 && (context == null || context.setChildren(output));
  }, [
    output
  ]), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CurrentAdaptContextScope.Provider, {
    value: scopeName,
    children: enabled ? output : null
  });
}, {
  Contents: AdaptContents
}), AdaptPortalContents = function(props) {
  var { portalName } = useAdaptContext(props.scope);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_portal.PortalItem, {
    // passthrough={!isWeb && !isActive}
    hostName: portalName,
    children: props.children
  });
}, useAdaptIsActiveGiven = function(param) {
  var { when, platform } = param, media = (0, import_core.useMedia)();
  if (when == null && platform == null)
    return !1;
  var enabled = !1;
  return platform === "touch" ? enabled = import_constants.isTouchable : platform === "native" ? enabled = !import_constants.isWeb : platform === "web" ? enabled = import_constants.isWeb : platform === "ios" ? enabled = import_constants.isIos : platform === "android" && (enabled = import_constants.isAndroid), platform && enabled == !1 ? !1 : (when && typeof when == "string" && (enabled = media[when]), enabled);
}, useAdaptIsActive = function(scope) {
  var props = useAdaptContext(scope);
  return useAdaptIsActiveGiven(props);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Adapt,
  AdaptContents,
  AdaptContext,
  AdaptParent,
  AdaptPortalContents,
  ProvideAdaptContext,
  useAdaptContext,
  useAdaptIsActive
});
//# sourceMappingURL=Adapt.js.map
