import { jsx as _jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isWeb, useIsomorphicLayoutEffect } from "@tamagui/constants";
import { ListItemFrame, useListItem } from "@tamagui/list-item";
import * as React from "react";
import { createSelectContext, useSelectItemParentContext } from "./context";
var ITEM_NAME = "SelectItem", [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME), SelectItem = ListItemFrame.styleable(function(props, forwardedRef) {
  var { __scopeSelect, value, disabled = !1, textValue: textValueProp, index, ...restProps } = props, { props: listItemProps } = useListItem({
    ...!props.unstyled && {
      ellipse: !0
    },
    ...restProps
  }), context = useSelectItemParentContext(ITEM_NAME, __scopeSelect), { setSelectedIndex, listRef, setOpen, onChange, activeIndexSubscribe, valueSubscribe, allowMouseUpRef, allowSelectRef, setValueAtIndex, selectTimeoutRef, dataRef, interactions, shouldRenderWebNative, size, onActiveChange, initialValue } = context, [isSelected, setSelected] = React.useState(initialValue === value);
  React.useEffect(function() {
    return activeIndexSubscribe(function(i) {
      var isActive = index === i;
      if (isActive) {
        var _listRef_current_index;
        onActiveChange(value, index), listRef == null || (_listRef_current_index = listRef.current[index]) === null || _listRef_current_index === void 0 || _listRef_current_index.focus();
      }
    });
  }, [
    index
  ]), React.useEffect(function() {
    return valueSubscribe(function(val) {
      setSelected(val === value);
    });
  }, [
    value
  ]);
  var textId = React.useId(), refCallback = React.useCallback(function(node) {
    isWeb && node instanceof HTMLElement && listRef && (listRef.current[index] = node);
  }, []), composedRefs = useComposedRefs(forwardedRef, refCallback);
  useIsomorphicLayoutEffect(function() {
    setValueAtIndex(index, value);
  }, [
    index,
    setValueAtIndex,
    value
  ]);
  function handleSelect() {
    setSelectedIndex(index), onChange(value), setOpen(!1);
  }
  var selectItemProps = React.useMemo(function() {
    return interactions ? interactions.getItemProps({
      onTouchMove() {
        allowSelectRef.current = !0, allowMouseUpRef.current = !1;
      },
      onTouchEnd() {
        allowSelectRef.current = !1, allowMouseUpRef.current = !0;
      },
      onKeyDown(event) {
        event.key === "Enter" || event.key === " " && !dataRef?.current.typing ? (event.preventDefault(), handleSelect()) : allowSelectRef.current = !0;
      },
      onClick() {
        allowSelectRef.current && handleSelect();
      },
      onMouseUp() {
        allowMouseUpRef.current && (allowSelectRef.current && handleSelect(), clearTimeout(selectTimeoutRef.current), selectTimeoutRef.current = setTimeout(function() {
          allowSelectRef.current = !0;
        }));
      }
    }) : {
      onPress: handleSelect
    };
  }, [
    handleSelect
  ]);
  return /* @__PURE__ */ _jsx(SelectItemContextProvider, {
    scope: __scopeSelect,
    value,
    textId: textId || "",
    isSelected,
    children: shouldRenderWebNative ? /* @__PURE__ */ _jsx("option", {
      value,
      children: props.children
    }) : /* @__PURE__ */ _jsx(ListItemFrame, {
      tag: "div",
      componentName: ITEM_NAME,
      ref: composedRefs,
      "aria-labelledby": textId,
      "aria-selected": isSelected,
      "data-state": isSelected ? "active" : "inactive",
      "aria-disabled": disabled || void 0,
      "data-disabled": disabled ? "" : void 0,
      tabIndex: disabled ? void 0 : -1,
      ...!props.unstyled && {
        backgrounded: !0,
        pressTheme: !0,
        hoverTheme: !0,
        focusTheme: !0,
        cursor: "default",
        size,
        outlineOffset: -0.5,
        focusVisibleStyle: {
          outlineColor: "$outlineColor",
          outlineWidth: 1,
          outlineStyle: "solid"
        }
      },
      ...listItemProps,
      ...selectItemProps
    })
  });
}, {
  disableTheme: !0
});
export {
  SelectItem,
  SelectItemContextProvider,
  useSelectItemContext
};
//# sourceMappingURL=SelectItem.js.map
