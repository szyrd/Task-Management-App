import { useResponderEvents } from "@tamagui/react-native-use-responder-events";
import {
  Stack as WebStack,
  Text as WebText,
  View as WebView,
  setupHooks
} from "@tamagui/web";
import "react";
import "./createOptimizedView";
import { getBaseViews } from "./getBaseViews";
import { getRect } from "./helpers/getRect";
import { measureLayout, useElementLayout } from "./hooks/useElementLayout";
import "./vendor/Pressability";
export * from "@tamagui/web";
export * from "./reactNativeTypes";
const baseViews = getBaseViews();
setupHooks({
  getBaseViews,
  setElementProps: (node) => {
    node && !node.measure && (node.measure ||= (callback) => measureLayout(node, null, callback), node.measureLayout ||= (relativeToNode, success) => measureLayout(node, relativeToNode, success), node.measureInWindow ||= (callback) => {
      setTimeout(() => {
        const { height, left, top, width } = getRect(node);
        callback(left, top, width, height);
      }, 0);
    });
  },
  usePropsTransform(elementType, propsIn, stateRef, willHydrate) {
    {
      const isDOM = typeof elementType == "string", {
        // remove event props handles by useResponderEvents
        onMoveShouldSetResponder,
        onMoveShouldSetResponderCapture,
        onResponderEnd,
        onResponderGrant,
        onResponderMove,
        onResponderReject,
        onResponderRelease,
        onResponderStart,
        onResponderTerminate,
        onResponderTerminationRequest,
        onScrollShouldSetResponder,
        onScrollShouldSetResponderCapture,
        onSelectionChangeShouldSetResponder,
        onSelectionChangeShouldSetResponderCapture,
        onStartShouldSetResponder,
        onStartShouldSetResponderCapture,
        // android
        collapsable,
        focusable,
        // deprecated,
        accessible,
        accessibilityDisabled,
        onLayout,
        hrefAttrs,
        ...plainDOMProps
      } = propsIn;
      if ((willHydrate || isDOM) && (useElementLayout(stateRef, isDOM ? onLayout : void 0), useResponderEvents(stateRef, isDOM ? propsIn : void 0)), isDOM) {
        if (plainDOMProps.href && hrefAttrs) {
          const { download, rel, target } = hrefAttrs;
          download != null && (plainDOMProps.download = download), rel && (plainDOMProps.rel = rel), typeof target == "string" && (plainDOMProps.target = target.charAt(0) !== "_" ? `_${target}` : target);
        }
        return plainDOMProps;
      }
    }
  },
  useEvents(viewProps, events, { pseudos }, setStateShallow, staticConfig) {
  }
});
const View = WebView, Stack = WebStack, Text = WebText;
export {
  Stack,
  Text,
  View
};
//# sourceMappingURL=index.js.map
