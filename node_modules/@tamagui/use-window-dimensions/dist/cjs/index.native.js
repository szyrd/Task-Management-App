"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var src_exports = {};
__export(src_exports, {
  configureInitialWindowDimensions: () => configureInitialWindowDimensions,
  useWindowDimensions: () => useWindowDimensions
});
module.exports = __toCommonJS(src_exports);
var import_react = __toESM(require("react")), import_constants = require("@tamagui/constants"), import_react_native = require("react-native"), initialValue = {
  height: 800,
  width: 600
};
function configureInitialWindowDimensions(next) {
  Object.assign(initialValue, next);
}
import_react_native.Dimensions.addEventListener("change", function() {
  cbs.forEach(function(cb) {
    return cb(window);
  });
});
var cbs = /* @__PURE__ */ new Set();
function subscribe(cb) {
  return cbs.add(cb), function() {
    return cbs.delete(cb);
  };
}
function useWindowDimensions() {
  var { serverValue = initialValue } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return import_react.default.useSyncExternalStore(subscribe, function() {
    return import_react_native.Dimensions.get("window");
  }, function() {
    return import_constants.isWeb ? serverValue : import_react_native.Dimensions.get("window");
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  configureInitialWindowDimensions,
  useWindowDimensions
});
//# sourceMappingURL=index.js.map
