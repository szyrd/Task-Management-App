import { jsx as _jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import { useIsomorphicLayoutEffect } from "@tamagui/constants";
import { Stack, View as TamaguiView, createStyledContext, getVariableValue, styled, useProps } from "@tamagui/core";
import { arrow, flip, offset as offsetFn, platform, shift, useFloating } from "@tamagui/floating";
import { getSpace } from "@tamagui/get-token";
import { ThemeableStack, YStack } from "@tamagui/stacks";
import { startTransition } from "@tamagui/start-transition";
import * as React from "react";
import { Keyboard, useWindowDimensions } from "react-native";
var PopperContext = createStyledContext({}), { useStyledContext: usePopperContext, Provider: PopperProvider } = PopperContext, checkFloating = {
  name: "checkFloating",
  fn(data) {
    return {
      data: {
        hasFloating: !!data.rects.floating.width
      }
    };
  }
}, setupOptions = {};
function setupPopper(options) {
  Object.assign(setupOptions, options);
}
function Popper(props) {
  var _middlewareData_checkFloating, { children, size, strategy = "absolute", placement = "bottom", stayInFrame, allowFlip, offset, disableRTL, __scopePopper } = props, [arrowEl, setArrow] = React.useState(null), [arrowSize, setArrowSize] = React.useState(0), offsetOptions = offset ?? arrowSize, floating = useFloating({
    strategy,
    placement,
    sameScrollView: !1,
    // this only takes effect on native
    platform: disableRTL ?? setupOptions.disableRTL ? {
      ...platform,
      isRTL(element) {
        return !1;
      }
    } : platform,
    middleware: [
      stayInFrame ? shift(typeof stayInFrame == "boolean" ? {} : stayInFrame) : null,
      allowFlip ? flip(typeof allowFlip == "boolean" ? {} : allowFlip) : null,
      arrowEl ? arrow({
        element: arrowEl
      }) : null,
      typeof offsetOptions < "u" ? offsetFn(offsetOptions) : null,
      checkFloating
    ].filter(Boolean)
  }), {
    refs,
    middlewareData,
    // @ts-expect-error this comes from Tooltip for example
    open
  } = floating, dimensions = useWindowDimensions(), [keyboardOpen, setKeyboardOpen] = React.useState(!1);
  React.useEffect(function() {
    var showSubscription = Keyboard.addListener("keyboardDidShow", function() {
      startTransition(function() {
        setKeyboardOpen(!0);
      });
    }), hideSubscription = Keyboard.addListener("keyboardDidHide", function() {
      startTransition(function() {
        setKeyboardOpen(!1);
      });
    });
    return function() {
      showSubscription.remove(), hideSubscription.remove();
    };
  }, []), useIsomorphicLayoutEffect(function() {
    floating.update();
  }, [
    dimensions,
    keyboardOpen
  ]);
  var popperContext = {
    size,
    arrowRef: setArrow,
    arrowStyle: middlewareData.arrow,
    onArrowSize: setArrowSize,
    scope: __scopePopper,
    hasFloating: (_middlewareData_checkFloating = middlewareData.checkFloating) === null || _middlewareData_checkFloating === void 0 ? void 0 : _middlewareData_checkFloating.hasFloating,
    ...floating
  };
  return /* @__PURE__ */ _jsx(PopperProvider, {
    ...popperContext,
    children
  });
}
var PopperAnchor = YStack.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { virtualRef, __scopePopper, ...anchorProps } = props, { getReferenceProps, refs } = usePopperContext(__scopePopper), ref = React.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref, refs.setReference);
  React.useEffect(function() {
    virtualRef && refs.setReference(virtualRef.current);
  }, [
    virtualRef
  ]);
  var stackProps = {
    ref: composedRefs,
    ...anchorProps
  };
  return /* @__PURE__ */ _jsx(TamaguiView, {
    ...getReferenceProps ? getReferenceProps(stackProps) : stackProps
  });
})), PopperContentFrame = styled(ThemeableStack, {
  name: "PopperContent",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        radiused: !0
      }
    },
    size: {
      "...size": function(val, param) {
        var { tokens } = param;
        return {
          padding: tokens.space[val],
          borderRadius: tokens.radius[val]
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), PopperContent = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopePopper, enableAnimationForPositionChange, ...rest } = props, { strategy, placement, refs, x, y, getFloatingProps, size, update, floatingStyles, hasFloating } = usePopperContext(__scopePopper), contentRefs = useComposedRefs(refs.setFloating, forwardedRef), contents = React.useMemo(function() {
    return /* @__PURE__ */ _jsx(PopperContentFrame, {
      "data-placement": placement,
      "data-strategy": strategy,
      contain: "layout",
      size,
      ...rest
    }, "popper-content-frame");
  }, [
    placement,
    strategy,
    props
  ]), [needsMeasure, setNeedsMeasure] = React.useState(!0);
  React.useEffect(function() {
    enableAnimationForPositionChange && (x || y) && setNeedsMeasure(!1);
  }, [
    enableAnimationForPositionChange,
    x,
    y
  ]);
  var show = !0, frameProps = {
    ref: contentRefs,
    x: x || 0,
    y: y || 0,
    top: 0,
    left: 0,
    position: strategy,
    opacity: show ? 1 : 0,
    ...enableAnimationForPositionChange && {
      // apply animation but disable it on initial render to avoid animating from 0 to the first position
      animation: rest.animation,
      animateOnly: needsMeasure ? [
        "none"
      ] : rest.animateOnly,
      animatePresence: !1
    }
  };
  return /* @__PURE__ */ _jsx(Stack, {
    ...getFloatingProps ? getFloatingProps(frameProps) : frameProps,
    children: contents
  });
}), PopperArrowFrame = styled(YStack, {
  name: "PopperArrow",
  variants: {
    unstyled: {
      false: {
        borderColor: "$borderColor",
        backgroundColor: "$background",
        position: "relative"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), PopperArrowOuterFrame = styled(YStack, {
  name: "PopperArrowOuter",
  variants: {
    unstyled: {
      false: {
        position: "absolute",
        zIndex: 1e6,
        pointerEvents: "none",
        overflow: "hidden",
        alignItems: "center",
        justifyContent: "center"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), opposites = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
}, PopperArrow = PopperArrowFrame.styleable(function(propsIn, forwardedRef) {
  var _context_arrowStyle, _context_arrowStyle1, { __scopePopper, ...rest } = propsIn, props = useProps(rest), { offset, size: sizeProp, borderWidth = 0, ...arrowProps } = props, context = usePopperContext(__scopePopper), sizeVal = typeof sizeProp == "number" ? sizeProp : getVariableValue(getSpace(sizeProp ?? context.size, {
    shift: -2,
    bounds: [
      2
    ]
  })), size = Math.max(0, +sizeVal), { placement } = context, refs = useComposedRefs(context.arrowRef, forwardedRef), x = ((_context_arrowStyle = context.arrowStyle) === null || _context_arrowStyle === void 0 ? void 0 : _context_arrowStyle.x) || 0, y = ((_context_arrowStyle1 = context.arrowStyle) === null || _context_arrowStyle1 === void 0 ? void 0 : _context_arrowStyle1.y) || 0, primaryPlacement = placement ? placement.split("-")[0] : "top", arrowStyle = {
    x,
    y,
    width: size,
    height: size
  }, innerArrowStyle = {}, isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
  if (primaryPlacement) {
    arrowStyle[isVertical ? "width" : "height"] = size * 2;
    var oppSide = opposites[primaryPlacement];
    oppSide && (arrowStyle[oppSide] = -size, innerArrowStyle[oppSide] = size / 2), (oppSide === "top" || oppSide === "bottom") && (arrowStyle.left = 0), (oppSide === "left" || oppSide === "right") && (arrowStyle.top = 0), useIsomorphicLayoutEffect(function() {
      var _context_onArrowSize;
      (_context_onArrowSize = context.onArrowSize) === null || _context_onArrowSize === void 0 || _context_onArrowSize.call(context, size);
    }, [
      size,
      context.onArrowSize
    ]);
  }
  return /* @__PURE__ */ _jsx(PopperArrowOuterFrame, {
    ref: refs,
    ...arrowStyle,
    children: /* @__PURE__ */ _jsx(PopperArrowFrame, {
      width: size,
      height: size,
      ...arrowProps,
      ...innerArrowStyle,
      rotate: "45deg",
      ...primaryPlacement === "bottom" && {
        borderLeftWidth: borderWidth,
        borderTopWidth: borderWidth
      },
      ...primaryPlacement === "top" && {
        borderBottomWidth: borderWidth,
        borderRightWidth: borderWidth
      },
      ...primaryPlacement === "right" && {
        borderLeftWidth: borderWidth,
        borderBottomWidth: borderWidth
      },
      ...primaryPlacement === "left" && {
        borderTopWidth: borderWidth,
        borderRightWidth: borderWidth
      }
    })
  });
});
export {
  Popper,
  PopperAnchor,
  PopperArrow,
  PopperContent,
  PopperContentFrame,
  PopperContext,
  PopperProvider,
  setupPopper,
  usePopperContext
};
//# sourceMappingURL=Popper.js.map
