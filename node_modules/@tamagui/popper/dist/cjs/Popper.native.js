"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Popper_exports = {};
__export(Popper_exports, {
  Popper: () => Popper,
  PopperAnchor: () => PopperAnchor,
  PopperArrow: () => PopperArrow,
  PopperContent: () => PopperContent,
  PopperContentFrame: () => PopperContentFrame,
  PopperContext: () => PopperContext,
  PopperProvider: () => PopperProvider,
  setupPopper: () => setupPopper,
  usePopperContext: () => usePopperContext
});
module.exports = __toCommonJS(Popper_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_compose_refs = require("@tamagui/compose-refs"), import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_floating = require("@tamagui/floating"), import_get_token = require("@tamagui/get-token"), import_stacks = require("@tamagui/stacks"), import_start_transition = require("@tamagui/start-transition"), React = __toESM(require("react")), import_react_native = require("react-native"), PopperContext = (0, import_core.createStyledContext)({}), { useStyledContext: usePopperContext, Provider: PopperProvider } = PopperContext, checkFloating = {
  name: "checkFloating",
  fn(data) {
    return {
      data: {
        hasFloating: !!data.rects.floating.width
      }
    };
  }
}, setupOptions = {};
function setupPopper(options) {
  Object.assign(setupOptions, options);
}
function Popper(props) {
  var _middlewareData_checkFloating, { children, size, strategy = "absolute", placement = "bottom", stayInFrame, allowFlip, offset, disableRTL, __scopePopper } = props, [arrowEl, setArrow] = React.useState(null), [arrowSize, setArrowSize] = React.useState(0), offsetOptions = offset ?? arrowSize, floating = (0, import_floating.useFloating)({
    strategy,
    placement,
    sameScrollView: !1,
    // this only takes effect on native
    platform: disableRTL ?? setupOptions.disableRTL ? {
      ...import_floating.platform,
      isRTL(element) {
        return !1;
      }
    } : import_floating.platform,
    middleware: [
      stayInFrame ? (0, import_floating.shift)(typeof stayInFrame == "boolean" ? {} : stayInFrame) : null,
      allowFlip ? (0, import_floating.flip)(typeof allowFlip == "boolean" ? {} : allowFlip) : null,
      arrowEl ? (0, import_floating.arrow)({
        element: arrowEl
      }) : null,
      typeof offsetOptions < "u" ? (0, import_floating.offset)(offsetOptions) : null,
      checkFloating
    ].filter(Boolean)
  }), {
    refs,
    middlewareData,
    // @ts-expect-error this comes from Tooltip for example
    open
  } = floating, dimensions = (0, import_react_native.useWindowDimensions)(), [keyboardOpen, setKeyboardOpen] = React.useState(!1);
  React.useEffect(function() {
    var showSubscription = import_react_native.Keyboard.addListener("keyboardDidShow", function() {
      (0, import_start_transition.startTransition)(function() {
        setKeyboardOpen(!0);
      });
    }), hideSubscription = import_react_native.Keyboard.addListener("keyboardDidHide", function() {
      (0, import_start_transition.startTransition)(function() {
        setKeyboardOpen(!1);
      });
    });
    return function() {
      showSubscription.remove(), hideSubscription.remove();
    };
  }, []), (0, import_constants.useIsomorphicLayoutEffect)(function() {
    floating.update();
  }, [
    dimensions,
    keyboardOpen
  ]);
  var popperContext = {
    size,
    arrowRef: setArrow,
    arrowStyle: middlewareData.arrow,
    onArrowSize: setArrowSize,
    scope: __scopePopper,
    hasFloating: (_middlewareData_checkFloating = middlewareData.checkFloating) === null || _middlewareData_checkFloating === void 0 ? void 0 : _middlewareData_checkFloating.hasFloating,
    ...floating
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperProvider, {
    ...popperContext,
    children
  });
}
var PopperAnchor = import_stacks.YStack.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { virtualRef, __scopePopper, ...anchorProps } = props, { getReferenceProps, refs } = usePopperContext(__scopePopper), ref = React.useRef(null), composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, ref, refs.setReference);
  React.useEffect(function() {
    virtualRef && refs.setReference(virtualRef.current);
  }, [
    virtualRef
  ]);
  var stackProps = {
    ref: composedRefs,
    ...anchorProps
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.View, {
    ...getReferenceProps ? getReferenceProps(stackProps) : stackProps
  });
})), PopperContentFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: "PopperContent",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        radiused: !0
      }
    },
    size: {
      "...size": function(val, param) {
        var { tokens } = param;
        return {
          padding: tokens.space[val],
          borderRadius: tokens.radius[val]
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), PopperContent = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var { __scopePopper, enableAnimationForPositionChange, ...rest } = props, { strategy, placement, refs, x, y, getFloatingProps, size, update, floatingStyles, hasFloating } = usePopperContext(__scopePopper), contentRefs = (0, import_compose_refs.useComposedRefs)(refs.setFloating, forwardedRef), contents = React.useMemo(function() {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperContentFrame, {
      "data-placement": placement,
      "data-strategy": strategy,
      contain: "layout",
      size,
      ...rest
    }, "popper-content-frame");
  }, [
    placement,
    strategy,
    props
  ]), [needsMeasure, setNeedsMeasure] = React.useState(!0);
  React.useEffect(function() {
    enableAnimationForPositionChange && (x || y) && setNeedsMeasure(!1);
  }, [
    enableAnimationForPositionChange,
    x,
    y
  ]);
  var show = !0, frameProps = {
    ref: contentRefs,
    x: x || 0,
    y: y || 0,
    top: 0,
    left: 0,
    position: strategy,
    opacity: show ? 1 : 0,
    ...enableAnimationForPositionChange && {
      // apply animation but disable it on initial render to avoid animating from 0 to the first position
      animation: rest.animation,
      animateOnly: needsMeasure ? [
        "none"
      ] : rest.animateOnly,
      animatePresence: !1
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.Stack, {
    ...getFloatingProps ? getFloatingProps(frameProps) : frameProps,
    children: contents
  });
}), PopperArrowFrame = (0, import_core.styled)(import_stacks.YStack, {
  name: "PopperArrow",
  variants: {
    unstyled: {
      false: {
        borderColor: "$borderColor",
        backgroundColor: "$background",
        position: "relative"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), PopperArrowOuterFrame = (0, import_core.styled)(import_stacks.YStack, {
  name: "PopperArrowOuter",
  variants: {
    unstyled: {
      false: {
        position: "absolute",
        zIndex: 1e6,
        pointerEvents: "none",
        overflow: "hidden",
        alignItems: "center",
        justifyContent: "center"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), opposites = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
}, PopperArrow = PopperArrowFrame.styleable(function(propsIn, forwardedRef) {
  var _context_arrowStyle, _context_arrowStyle1, { __scopePopper, ...rest } = propsIn, props = (0, import_core.useProps)(rest), { offset, size: sizeProp, borderWidth = 0, ...arrowProps } = props, context = usePopperContext(__scopePopper), sizeVal = typeof sizeProp == "number" ? sizeProp : (0, import_core.getVariableValue)((0, import_get_token.getSpace)(sizeProp ?? context.size, {
    shift: -2,
    bounds: [
      2
    ]
  })), size = Math.max(0, +sizeVal), { placement } = context, refs = (0, import_compose_refs.useComposedRefs)(context.arrowRef, forwardedRef), x = ((_context_arrowStyle = context.arrowStyle) === null || _context_arrowStyle === void 0 ? void 0 : _context_arrowStyle.x) || 0, y = ((_context_arrowStyle1 = context.arrowStyle) === null || _context_arrowStyle1 === void 0 ? void 0 : _context_arrowStyle1.y) || 0, primaryPlacement = placement ? placement.split("-")[0] : "top", arrowStyle = {
    x,
    y,
    width: size,
    height: size
  }, innerArrowStyle = {}, isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
  if (primaryPlacement) {
    arrowStyle[isVertical ? "width" : "height"] = size * 2;
    var oppSide = opposites[primaryPlacement];
    oppSide && (arrowStyle[oppSide] = -size, innerArrowStyle[oppSide] = size / 2), (oppSide === "top" || oppSide === "bottom") && (arrowStyle.left = 0), (oppSide === "left" || oppSide === "right") && (arrowStyle.top = 0), (0, import_constants.useIsomorphicLayoutEffect)(function() {
      var _context_onArrowSize;
      (_context_onArrowSize = context.onArrowSize) === null || _context_onArrowSize === void 0 || _context_onArrowSize.call(context, size);
    }, [
      size,
      context.onArrowSize
    ]);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperArrowOuterFrame, {
    ref: refs,
    ...arrowStyle,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperArrowFrame, {
      width: size,
      height: size,
      ...arrowProps,
      ...innerArrowStyle,
      rotate: "45deg",
      ...primaryPlacement === "bottom" && {
        borderLeftWidth: borderWidth,
        borderTopWidth: borderWidth
      },
      ...primaryPlacement === "top" && {
        borderBottomWidth: borderWidth,
        borderRightWidth: borderWidth
      },
      ...primaryPlacement === "right" && {
        borderLeftWidth: borderWidth,
        borderBottomWidth: borderWidth
      },
      ...primaryPlacement === "left" && {
        borderTopWidth: borderWidth,
        borderRightWidth: borderWidth
      }
    })
  });
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Popper,
  PopperAnchor,
  PopperArrow,
  PopperContent,
  PopperContentFrame,
  PopperContext,
  PopperProvider,
  setupPopper,
  usePopperContext
});
//# sourceMappingURL=Popper.js.map
