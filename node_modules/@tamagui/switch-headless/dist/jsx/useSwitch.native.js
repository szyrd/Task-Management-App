import { jsx as _jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isWeb } from "@tamagui/constants";
import { composeEventHandlers } from "@tamagui/helpers";
import { useLabelContext } from "@tamagui/label";
import { usePrevious } from "@tamagui/use-previous";
import * as React from "react";
function getState(checked) {
  return checked ? "checked" : "unchecked";
}
var BubbleInput = function(props) {
  var { control, checked, bubbles = !0, ...inputProps } = props, ref = React.useRef(null), prevChecked = usePrevious(checked);
  return React.useEffect(function() {
    var input = ref.current, inputProto = window.HTMLInputElement.prototype, descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked"), setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      var event = new Event("click", {
        bubbles
      });
      setChecked.call(input, checked), input.dispatchEvent(event);
    }
  }, [
    prevChecked,
    checked,
    bubbles
  ]), // @ts-ignore
  /* @__PURE__ */ _jsx("input", {
    type: "checkbox",
    "aria-hidden": !0,
    defaultChecked: checked,
    ...inputProps,
    tabIndex: -1,
    ref,
    style: {
      ...props.style,
      position: "absolute",
      pointerEvents: "none",
      opacity: 0,
      margin: 0
    }
  });
};
function useSwitch(props, param, ref) {
  var [checked, setChecked] = param, { disabled, name, value, required } = props, hasConsumerStoppedPropagationRef = React.useRef(!1), [button, setButton] = React.useState(null), composedRefs = useComposedRefs(ref, setButton), isFormControl = isWeb ? button ? !!button.closest("form") : !0 : !1, labelId = useLabelContext(button), ariaLabelledBy = props["aria-labelledby"] || props.labeledBy || labelId;
  return {
    switchProps: {
      role: "switch",
      "aria-checked": checked,
      ...isWeb ? {
        tabIndex: disabled ? void 0 : 0,
        "data-state": getState(checked),
        "data-disabled": disabled ? "" : void 0,
        disabled
      } : {},
      ...props,
      "aria-labelledby": ariaLabelledBy,
      onPress: composeEventHandlers(props.onPress, function(event) {
        setChecked(function(prevChecked) {
          return !prevChecked;
        }), isWeb && isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
      })
    },
    switchRef: composedRefs,
    /**
    * insert as a sibling of your switch (should not be inside the switch)
    */
    bubbleInput: isWeb && isFormControl ? /* @__PURE__ */ _jsx(BubbleInput, {
      control: button,
      bubbles: !hasConsumerStoppedPropagationRef.current,
      name,
      value,
      checked,
      required,
      disabled,
      // We transform because the input is absolutely positioned but we have
      // rendered it **after** the button. This pulls it back to sit on top
      // of the button.
      style: {
        transform: "translateX(-100%)"
      }
    }) : null
  };
}
export {
  useSwitch
};
//# sourceMappingURL=useSwitch.js.map
