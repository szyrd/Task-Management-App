import { composeRefs } from "@tamagui/compose-refs";
import { useEvent } from "@tamagui/web";
import React from "react";
import { registerFocusable } from "./registerFocusable";
function useFocusable(param) {
  var { isInput, props, ref } = param, { id, onChangeText, value, defaultValue } = props, inputValue = React.useRef(value || defaultValue || ""), unregisterFocusable = React.useRef(), inputRef = React.useCallback(function(input) {
    var _unregisterFocusable_current;
    id && input && ((_unregisterFocusable_current = unregisterFocusable.current) === null || _unregisterFocusable_current === void 0 || _unregisterFocusable_current.call(unregisterFocusable), unregisterFocusable.current = registerFocusable(id, {
      focus: input.focus,
      ...isInput && {
        // react-native doesn't support programmatic .select()
        focusAndSelect() {
          input.focus(), input.setSelection && typeof inputValue.current == "string" && input.setSelection(0, inputValue.current.length);
        }
      }
    }));
  }, [
    isInput,
    id
  ]), combinedRefs = composeRefs(ref, inputRef);
  return React.useEffect(function() {
    return function() {
      var _unregisterFocusable_current;
      (_unregisterFocusable_current = unregisterFocusable.current) === null || _unregisterFocusable_current === void 0 || _unregisterFocusable_current.call(unregisterFocusable);
    };
  }, []), {
    ref: combinedRefs,
    onChangeText: useEvent(function(value2) {
      inputValue.current = value2, onChangeText?.(value2);
    })
  };
}
export {
  useFocusable
};
//# sourceMappingURL=focusableInputHOC.js.map
