import { composeRefs } from "@tamagui/compose-refs";
import { useEvent } from "@tamagui/web";
import React from "react";
import { registerFocusable } from "./registerFocusable";
function useFocusable({
  isInput,
  props,
  ref
}) {
  const { id, onChangeText, value, defaultValue } = props, inputValue = React.useRef(value || defaultValue || ""), unregisterFocusable = React.useRef(), inputRef = React.useCallback(
    (input) => {
      id && input && (unregisterFocusable.current?.(), unregisterFocusable.current = registerFocusable(id, {
        focus: input.focus,
        ...isInput && {
          // react-native doesn't support programmatic .select()
          focusAndSelect() {
            input.focus(), input.setSelection && typeof inputValue.current == "string" && input.setSelection(0, inputValue.current.length);
          }
        }
      }));
    },
    [isInput, id]
  ), combinedRefs = composeRefs(ref, inputRef);
  return React.useEffect(() => () => {
    unregisterFocusable.current?.();
  }, []), {
    ref: combinedRefs,
    onChangeText: useEvent((value2) => {
      inputValue.current = value2, onChangeText?.(value2);
    })
  };
}
export {
  useFocusable
};
//# sourceMappingURL=focusableInputHOC.js.map
