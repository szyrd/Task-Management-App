"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Theme_exports = {};
__export(Theme_exports, {
  Theme: () => Theme,
  getThemedChildren: () => getThemedChildren
});
module.exports = __toCommonJS(Theme_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_constants = require("@tamagui/constants"), import_react = __toESM(require("react")), import_createVariable = require("../createVariable"), import_ThemeManagerContext = require("../helpers/ThemeManagerContext"), import_useTheme = require("../hooks/useTheme"), import_ThemeDebug = require("./ThemeDebug"), import_log = require("../helpers/log"), Theme = /* @__PURE__ */ (0, import_react.forwardRef)(function(param, ref) {
  var { children, ...props } = param;
  if (props.disable)
    return children;
  var isRoot = !!props._isRoot, themeState = (0, import_useTheme.useChangeThemeEffect)(props, isRoot), disableDirectChildTheme = props["disable-child-theme"], finalChildren = disableDirectChildTheme ? import_react.Children.map(children, function(child) {
    return /* @__PURE__ */ (0, import_react.cloneElement)(child, {
      "data-disable-theme": !0
    });
  }) : children;
  if (ref)
    try {
      import_react.default.Children.only(finalChildren), finalChildren = /* @__PURE__ */ (0, import_react.cloneElement)(finalChildren, {
        ref
      });
    } catch {
    }
  process.env.NODE_ENV === "development" && props.debug === "visualize" && (finalChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeDebug.ThemeDebug, {
    themeState,
    themeProps: props,
    children: finalChildren
  }));
  var stateRef = (0, import_react.useRef)({
    hasEverThemed: !1
  });
  return getThemedChildren(themeState, finalChildren, props, isRoot, stateRef);
});
Theme.displayName = "Theme";
Theme.avoidForwardRef = !0;
function getThemedChildren(themeState, children, props) {
  var isRoot = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, stateRef = arguments.length > 4 ? arguments[4] : void 0, { themeManager, isNewTheme } = themeState;
  if (!themeManager)
    return children;
  var { shallow, forceClassName } = props, shouldRenderChildrenWithTheme = isNewTheme || isRoot || "inverse" in props || "name" in props || "reset" in props || "forceClassName" in props || stateRef.current.hasEverThemed;
  if (shouldRenderChildrenWithTheme && (stateRef.current.hasEverThemed = !0), !shouldRenderChildrenWithTheme)
    return children;
  process.env.NODE_ENV === "development" && shouldRenderChildrenWithTheme && props.debug === "verbose" && (0, import_log.log)(`adding theme: isRoot ${isRoot}, inverse ${"inverse" in props}, isNewTheme ${isNewTheme}, hasEver ${stateRef.current.hasEverThemed}`, props);
  var next = children;
  shallow && (next = import_react.Children.toArray(children).map(function(child) {
    return /* @__PURE__ */ (0, import_react.isValidElement)(child) ? /* @__PURE__ */ (0, import_react.cloneElement)(child, void 0, /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Theme, {
      name: themeManager.state.parentName,
      children: child.props.children
    })) : child;
  }));
  var elementsWithContext = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeManagerContext.ThemeManagerIDContext.Provider, {
    value: themeManager.id,
    children: next
  });
  return forceClassName === !1 ? elementsWithContext : import_constants.isWeb ? wrapThemeElements({
    children: elementsWithContext,
    themeState,
    forceClassName,
    isRoot
  }) : elementsWithContext;
}
function wrapThemeElements(param) {
  var { children, themeState, forceClassName, isRoot } = param;
  if (isRoot && forceClassName === !1)
    return children;
  var inverse = themeState.inversed, requiresExtraWrapper = typeof inverse == "boolean" || forceClassName, { className, style } = getThemeClassNameAndStyle(themeState, isRoot), themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
    className: `${className} _dsp_contents is_Theme`,
    style,
    children
  });
  if (requiresExtraWrapper) {
    var _themeState_state, name = ((_themeState_state = themeState.state) === null || _themeState_state === void 0 ? void 0 : _themeState_state.name) || "", inverseClassName = name.startsWith("light") ? "t_light is_inversed" : name.startsWith("dark") ? "t_dark is_inversed" : "";
    themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
      className: `${inverse ? inverseClassName : ""} _dsp_contents`,
      children: themedChildren
    });
  }
  return themedChildren;
}
var emptyObj = {};
function getThemeClassNameAndStyle(themeState) {
  var isRoot = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, _themeState_state, _themeState_state1;
  if (!themeState.isNewTheme)
    return {
      className: "",
      style: emptyObj
    };
  var themeColor = !((_themeState_state = themeState.state) === null || _themeState_state === void 0) && _themeState_state.theme && themeState.isNewTheme ? (0, import_createVariable.variableToString)(themeState.state.theme.color) : "", style = themeColor ? {
    color: themeColor
  } : void 0, className = ((_themeState_state1 = themeState.state) === null || _themeState_state1 === void 0 ? void 0 : _themeState_state1.className) || "";
  return isRoot && (className = className.replace("t_sub_theme", "")), {
    style,
    className
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Theme,
  getThemedChildren
});
//# sourceMappingURL=Theme.js.map
