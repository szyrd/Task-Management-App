"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var insertStyleRule_exports = {};
__export(insertStyleRule_exports, {
  getAllRules: () => getAllRules,
  getAllSelectors: () => getAllSelectors,
  getAllTransforms: () => getAllTransforms,
  insertStyleRules: () => insertStyleRules,
  insertedTransforms: () => insertedTransforms,
  listenForSheetChanges: () => listenForSheetChanges,
  scanAllSheets: () => scanAllSheets,
  setNonce: () => setNonce,
  shouldInsertStyleRules: () => shouldInsertStyleRules,
  updateRules: () => updateRules
});
module.exports = __toCommonJS(insertStyleRule_exports);
var import_constants = require("@tamagui/constants"), import_helpers = require("@tamagui/helpers"), import_createVariable = require("../createVariable"), scannedCache = /* @__PURE__ */ new WeakMap(), totalSelectorsInserted = /* @__PURE__ */ new Map(), allSelectors = {}, allRules = {}, insertedTransforms = {}, getAllSelectors = function() {
  return allSelectors;
}, getAllRules = function() {
  return Object.values(allRules);
}, getAllTransforms = function() {
  return insertedTransforms;
};
function addTransform(identifier, css, rule) {
  var s = css.indexOf("transform:");
  if (s === -1) {
    process.env.NODE_ENV === "development" && console.error(`\u274C Invalid transform, likely used deg/% improperly ${identifier}`);
    return;
  }
  var startI = s + 10, endI = css.indexOf(";"), value = css.slice(startI, endI);
  if (!insertedTransforms[identifier])
    return insertedTransforms[identifier] = value, !0;
}
function listenForSheetChanges() {
  if (import_constants.isClient) {
    var mo = new MutationObserver(function(entries) {
      var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
      try {
        for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
          var entry = _step.value;
          if (entry instanceof HTMLStyleElement && entry.sheet || entry instanceof HTMLLinkElement && entry.href.endsWith(".css")) {
            scanAllSheets();
            break;
          }
        }
      } catch (err) {
        _didIteratorError = !0, _iteratorError = err;
      } finally {
        try {
          !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
        } finally {
          if (_didIteratorError)
            throw _iteratorError;
        }
      }
    });
    mo.observe(document.head, {
      childList: !0
    });
  }
}
var lastScannedSheets = null;
function scanAllSheets() {
  var collectThemes = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, tokens = arguments.length > 1 ? arguments[1] : void 0;
  if (process.env.NODE_ENV !== "test" && import_constants.isClient) {
    var themes, sheets = document.styleSheets || [], prev = lastScannedSheets, current = new Set(sheets), _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
    try {
      for (var _iterator = current[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
        var sheet2 = _step.value;
        if (sheet2) {
          var out = updateSheetStyles(sheet2, !1, collectThemes, tokens);
          out && (themes = out);
        }
      }
    } catch (err) {
      _didIteratorError = !0, _iteratorError = err;
    } finally {
      try {
        !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
      } finally {
        if (_didIteratorError)
          throw _iteratorError;
      }
    }
    if (lastScannedSheets = current, prev) {
      var _iteratorNormalCompletion1 = !0, _didIteratorError1 = !1, _iteratorError1 = void 0;
      try {
        for (var _iterator1 = prev[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = !0) {
          var sheet1 = _step1.value;
          sheet1 && !current.has(sheet1) && updateSheetStyles(sheet1, !0);
        }
      } catch (err) {
        _didIteratorError1 = !0, _iteratorError1 = err;
      } finally {
        try {
          !_iteratorNormalCompletion1 && _iterator1.return != null && _iterator1.return();
        } finally {
          if (_didIteratorError1)
            throw _iteratorError1;
        }
      }
    }
    return themes;
  }
}
function track(id) {
  var remove = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, next = (totalSelectorsInserted.get(id) || 0) + (remove ? -1 : 1);
  return totalSelectorsInserted.set(id, next), next;
}
var bailAfterEnv = process.env.TAMAGUI_BAIL_AFTER_SCANNING_X_CSS_RULES, bailAfter = bailAfterEnv ? +bailAfterEnv : 700;
function updateSheetStyles(sheet2) {
  var remove = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, collectThemes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, tokens = arguments.length > 3 ? arguments[3] : void 0, _getTamaguiSelector, _getTamaguiSelector1, rules;
  try {
    if (rules = sheet2.cssRules, !rules)
      return;
  } catch {
    return;
  }
  var firstSelector = (_getTamaguiSelector = getTamaguiSelector(rules[0], collectThemes)) === null || _getTamaguiSelector === void 0 ? void 0 : _getTamaguiSelector[0], lastSelector = (_getTamaguiSelector1 = getTamaguiSelector(rules[rules.length - 1], collectThemes)) === null || _getTamaguiSelector1 === void 0 ? void 0 : _getTamaguiSelector1[0], cacheKey = `${rules.length}${firstSelector}${lastSelector}`, lastScanned = scannedCache.get(sheet2);
  if (!(!remove && lastScanned === cacheKey)) {
    for (var len = rules.length, fails = 0, dedupedThemes, nameToTheme = {}, i = 0; i < len; i++) {
      var rule = rules[i];
      if (rule instanceof CSSStyleRule) {
        var response = getTamaguiSelector(rule, collectThemes);
        if (response)
          fails = 0;
        else {
          if (fails++, fails > bailAfter)
            return;
          continue;
        }
        var [identifier, cssRule, isTheme] = response;
        if (isTheme) {
          var deduped = addThemesFromCSS(cssRule, tokens);
          if (deduped) {
            var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
            try {
              for (var _loop = function() {
                var name = _step.value;
                nameToTheme[name] ? (Object.apply(nameToTheme[name], deduped.theme), deduped.names = deduped.names.filter(function(x) {
                  return x !== name;
                })) : nameToTheme[name] = deduped.theme;
              }, _iterator = deduped.names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) _loop();
            } catch (err) {
              _didIteratorError = !0, _iteratorError = err;
            } finally {
              try {
                !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
              } finally {
                if (_didIteratorError)
                  throw _iteratorError;
              }
            }
            dedupedThemes || (dedupedThemes = []), dedupedThemes.push(deduped);
          }
          continue;
        }
        if (!process.env.TAMAGUI_REACT_19) {
          var total = track(identifier, remove);
          if (remove)
            total === 0 && delete allSelectors[identifier];
          else if (!(identifier in allSelectors)) {
            var isTransform = identifier.startsWith("_transform-"), shouldInsert = isTransform ? addTransform(identifier, cssRule.cssText, cssRule) : !0;
            shouldInsert && (allSelectors[identifier] = cssRule.cssText);
          }
        }
      }
    }
    return scannedCache.set(sheet2, cacheKey), dedupedThemes;
  }
}
var colorVarToVal, rootComputedStyle = null;
function addThemesFromCSS(cssStyleRule, tokens) {
  var selectors = cssStyleRule.selectorText.split(",");
  if (selectors.length) {
    if (tokens && !colorVarToVal) {
      colorVarToVal = {};
      for (var key in tokens.color) {
        var token = tokens.color[key];
        colorVarToVal[token.name] = token.val;
      }
    }
    var rulesWithBraces = (cssStyleRule.cssText || "").slice(cssStyleRule.selectorText.length + 2, -1), rules = rulesWithBraces.split(";"), values = {}, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
    try {
      for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
        var rule = _step.value, sepI = rule.indexOf(":");
        if (sepI !== -1) {
          var varIndex = rule.indexOf("--"), key1 = rule.slice(varIndex === -1 ? 0 : varIndex + 2, sepI);
          process.env.TAMAGUI_CSS_VARIABLE_PREFIX && (key1 = key1.replace(process.env.TAMAGUI_CSS_VARIABLE_PREFIX, ""));
          var val = rule.slice(sepI + 2), value = void 0;
          if (val[0] === "v" && val.startsWith("var(")) {
            var varName = val.slice(6, -1), tokenVal = colorVarToVal[varName];
            tokenVal ? value = tokenVal : (rootComputedStyle || (rootComputedStyle = getComputedStyle(document.body)), value = rootComputedStyle.getPropertyValue("--" + varName));
          } else
            value = val;
          values[key1] = (0, import_createVariable.createVariable)({
            key: key1,
            name: key1,
            val: value
          }, !0);
        }
      }
    } catch (err) {
      _didIteratorError = !0, _iteratorError = err;
    } finally {
      try {
        !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
      } finally {
        if (_didIteratorError)
          throw _iteratorError;
      }
    }
    var names = /* @__PURE__ */ new Set(), _iteratorNormalCompletion1 = !0, _didIteratorError1 = !1, _iteratorError1 = void 0;
    try {
      for (var _iterator1 = selectors[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = !0) {
        var selector = _step1.value, lastThemeSelectorIndex = selector.lastIndexOf(".t_"), name = selector.slice(lastThemeSelectorIndex).slice(3), [schemeChar] = selector[lastThemeSelectorIndex - 5], scheme = schemeChar === "d" ? "dark" : schemeChar === "i" ? "light" : "", themeName = scheme && scheme !== name ? `${scheme}_${name}` : name;
        !themeName || themeName === "light_dark" || themeName === "dark_light" || names.add(themeName);
      }
    } catch (err) {
      _didIteratorError1 = !0, _iteratorError1 = err;
    } finally {
      try {
        !_iteratorNormalCompletion1 && _iterator1.return != null && _iterator1.return();
      } finally {
        if (_didIteratorError1)
          throw _iteratorError1;
      }
    }
    return {
      names: [
        ...names
      ],
      theme: values
    };
  }
}
function getTamaguiSelector(rule) {
  var collectThemes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  if (rule instanceof CSSStyleRule) {
    var text = rule.selectorText;
    if (text[0] === ":" && text[1] === "r") {
      if (text.startsWith(":root ._"))
        return [
          getIdentifierFromTamaguiSelector(text),
          rule
        ];
      if (collectThemes && /^(:root\s?(\.t_[a-z0-9_]+\s*)+(,)?\s*)+$/i.test(text))
        return [
          text.slice(0, 20),
          // just used as uid
          rule,
          !0
        ];
    }
  } else if (rule instanceof CSSMediaRule)
    return rule.cssRules.length > 1 ? void 0 : getTamaguiSelector(rule.cssRules[0]);
}
var getIdentifierFromTamaguiSelector = function(selector) {
  var dotIndex = selector.indexOf(":");
  return dotIndex > -1 ? selector.slice(7, dotIndex) : selector.slice(7);
}, sheet = null;
function updateRules(identifier, rules) {
  if (!process.env.TAMAGUI_REACT_19)
    return identifier in allRules ? !1 : (allRules[identifier] = rules.join(" "), identifier.startsWith("_transform-") ? addTransform(identifier, rules[0]) : !0);
}
var nonce = "";
function setNonce(_) {
  nonce = _;
}
function insertStyleRules(rulesToInsert) {
  if (!process.env.TAMAGUI_REACT_19) {
    if (!sheet && import_constants.isClient && document.head) {
      var styleTag = document.createElement("style");
      nonce && (styleTag.nonce = nonce), sheet = document.head.appendChild(styleTag).sheet;
    }
    if (!sheet) return;
    for (var key in rulesToInsert) {
      var styleObject = rulesToInsert[key], identifier = styleObject[import_helpers.StyleObjectIdentifier];
      if (shouldInsertStyleRules(identifier)) {
        var rules = styleObject[import_helpers.StyleObjectRules];
        allSelectors[identifier] = rules.join(`
`), track(identifier), updateRules(identifier, rules);
        var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
        try {
          for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
            var rule = _step.value;
            if (process.env.NODE_ENV === "production")
              try {
                sheet.insertRule(rule, sheet.cssRules.length);
              } catch (err) {
                console.error("Error inserting CSS", err);
              }
            else
              sheet.insertRule(rule, sheet.cssRules.length);
          }
        } catch (err) {
          _didIteratorError = !0, _iteratorError = err;
        } finally {
          try {
            !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
          } finally {
            if (_didIteratorError)
              throw _iteratorError;
          }
        }
      }
    }
  }
}
var minInsertAmt = process.env.TAMAGUI_INSERT_SELECTOR_TRIES ? +process.env.TAMAGUI_INSERT_SELECTOR_TRIES : 1;
function shouldInsertStyleRules(identifier) {
  if (process.env.TAMAGUI_REACT_19)
    return !0;
  if (process.env.IS_STATIC === "is_static")
    return !0;
  var total = totalSelectorsInserted.get(identifier);
  return process.env.NODE_ENV === "development" && totalSelectorsInserted.size > +(process.env.TAMAGUI_STYLE_INSERTION_WARNING_LIMIT || 1e4) && console.warn('Warning: inserting many CSS rules, you may be animating something and generating many CSS insertions, which can degrade performance. Instead, try using the "disableClassName" property on elements that change styles often. To disable this warning set TAMAGUI_STYLE_INSERTION_WARNING_LIMIT from 50000 to something higher'), total === void 0 || total < minInsertAmt;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAllRules,
  getAllSelectors,
  getAllTransforms,
  insertStyleRules,
  insertedTransforms,
  listenForSheetChanges,
  scanAllSheets,
  setNonce,
  shouldInsertStyleRules,
  updateRules
});
//# sourceMappingURL=insertStyleRule.js.map
