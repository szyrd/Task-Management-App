import { jsx as _jsx } from "react/jsx-runtime";
import { isWeb } from "@tamagui/constants";
import React, { Children, cloneElement, forwardRef, isValidElement, useRef } from "react";
import { variableToString } from "../createVariable";
import { ThemeManagerIDContext } from "../helpers/ThemeManagerContext";
import { useChangeThemeEffect } from "../hooks/useTheme";
import { ThemeDebug } from "./ThemeDebug";
import { log } from "../helpers/log";
var Theme = /* @__PURE__ */ forwardRef(function(param, ref) {
  var { children, ...props } = param;
  if (props.disable)
    return children;
  var isRoot = !!props._isRoot, themeState = useChangeThemeEffect(props, isRoot), disableDirectChildTheme = props["disable-child-theme"], finalChildren = disableDirectChildTheme ? Children.map(children, function(child) {
    return /* @__PURE__ */ cloneElement(child, {
      "data-disable-theme": !0
    });
  }) : children;
  if (ref)
    try {
      React.Children.only(finalChildren), finalChildren = /* @__PURE__ */ cloneElement(finalChildren, {
        ref
      });
    } catch {
    }
  process.env.NODE_ENV === "development" && props.debug === "visualize" && (finalChildren = /* @__PURE__ */ _jsx(ThemeDebug, {
    themeState,
    themeProps: props,
    children: finalChildren
  }));
  var stateRef = useRef({
    hasEverThemed: !1
  });
  return getThemedChildren(themeState, finalChildren, props, isRoot, stateRef);
});
Theme.displayName = "Theme";
Theme.avoidForwardRef = !0;
function getThemedChildren(themeState, children, props) {
  var isRoot = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, stateRef = arguments.length > 4 ? arguments[4] : void 0, { themeManager, isNewTheme } = themeState;
  if (!themeManager)
    return children;
  var { shallow, forceClassName } = props, shouldRenderChildrenWithTheme = isNewTheme || isRoot || "inverse" in props || "name" in props || "reset" in props || "forceClassName" in props || stateRef.current.hasEverThemed;
  if (shouldRenderChildrenWithTheme && (stateRef.current.hasEverThemed = !0), !shouldRenderChildrenWithTheme)
    return children;
  process.env.NODE_ENV === "development" && shouldRenderChildrenWithTheme && props.debug === "verbose" && log(`adding theme: isRoot ${isRoot}, inverse ${"inverse" in props}, isNewTheme ${isNewTheme}, hasEver ${stateRef.current.hasEverThemed}`, props);
  var next = children;
  shallow && (next = Children.toArray(children).map(function(child) {
    return /* @__PURE__ */ isValidElement(child) ? /* @__PURE__ */ cloneElement(child, void 0, /* @__PURE__ */ _jsx(Theme, {
      name: themeManager.state.parentName,
      children: child.props.children
    })) : child;
  }));
  var elementsWithContext = /* @__PURE__ */ _jsx(ThemeManagerIDContext.Provider, {
    value: themeManager.id,
    children: next
  });
  return forceClassName === !1 ? elementsWithContext : isWeb ? wrapThemeElements({
    children: elementsWithContext,
    themeState,
    forceClassName,
    isRoot
  }) : elementsWithContext;
}
function wrapThemeElements(param) {
  var { children, themeState, forceClassName, isRoot } = param;
  if (isRoot && forceClassName === !1)
    return children;
  var inverse = themeState.inversed, requiresExtraWrapper = typeof inverse == "boolean" || forceClassName, { className, style } = getThemeClassNameAndStyle(themeState, isRoot), themedChildren = /* @__PURE__ */ _jsx("span", {
    className: `${className} _dsp_contents is_Theme`,
    style,
    children
  });
  if (requiresExtraWrapper) {
    var _themeState_state, name = ((_themeState_state = themeState.state) === null || _themeState_state === void 0 ? void 0 : _themeState_state.name) || "", inverseClassName = name.startsWith("light") ? "t_light is_inversed" : name.startsWith("dark") ? "t_dark is_inversed" : "";
    themedChildren = /* @__PURE__ */ _jsx("span", {
      className: `${inverse ? inverseClassName : ""} _dsp_contents`,
      children: themedChildren
    });
  }
  return themedChildren;
}
var emptyObj = {};
function getThemeClassNameAndStyle(themeState) {
  var isRoot = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, _themeState_state, _themeState_state1;
  if (!themeState.isNewTheme)
    return {
      className: "",
      style: emptyObj
    };
  var themeColor = !((_themeState_state = themeState.state) === null || _themeState_state === void 0) && _themeState_state.theme && themeState.isNewTheme ? variableToString(themeState.state.theme.color) : "", style = themeColor ? {
    color: themeColor
  } : void 0, className = ((_themeState_state1 = themeState.state) === null || _themeState_state1 === void 0 ? void 0 : _themeState_state1.className) || "";
  return isRoot && (className = className.replace("t_sub_theme", "")), {
    style,
    className
  };
}
export {
  Theme,
  getThemedChildren
};
//# sourceMappingURL=Theme.js.map
