import { startTransition } from "react";
var callImmediate = function(cb) {
  return cb();
};
function createShallowSetState(setter, isDisabled, transition, debug) {
  return function(next) {
    var wrap = transition ? startTransition : callImmediate;
    wrap(function() {
      setter(function(prev) {
        return mergeIfNotShallowEqual(prev, next, isDisabled, debug);
      });
    });
  };
}
function mergeIfNotShallowEqual(prev, next, isDisabled, debug) {
  if (isDisabled || !prev || !next || isEqualShallow(prev, next))
    return prev || next;
  if (process.env.NODE_ENV === "development" && debug && (console.info("setStateShallow CHANGE", {
    prev,
    next
  }), debug === "break"))
    debugger;
  return {
    ...prev,
    ...next
  };
}
function isEqualShallow(prev, next) {
  for (var key in next)
    if (prev[key] !== next[key])
      return !1;
  return !0;
}
export {
  createShallowSetState,
  isEqualShallow,
  mergeIfNotShallowEqual
};
//# sourceMappingURL=createShallowSetState.js.map
