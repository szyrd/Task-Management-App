import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { objectIdentityKey } from "./objectIdentityKey";
function createStyledContext(defaultValues) {
  var OGContext = /* @__PURE__ */ React.createContext(defaultValues), OGProvider = OGContext.Provider, Context = OGContext, scopedContexts = /* @__PURE__ */ new Map();
  function getOrCreateScopedContext(scope) {
    var ScopedContext = scopedContexts.get(scope);
    return ScopedContext || (ScopedContext = /* @__PURE__ */ React.createContext(defaultValues), scopedContexts.set(scope, ScopedContext)), ScopedContext;
  }
  var Provider = function(param) {
    var { children, scope, ...values } = param, next = React.useMemo(function() {
      return {
        // this ! is a workaround for ts error
        ...defaultValues,
        ...values
      };
    }, [
      objectIdentityKey(values)
    ]), Provider2 = OGProvider;
    return scope && (Provider2 = getOrCreateScopedContext(scope).Provider), /* @__PURE__ */ _jsx(Provider2, {
      value: next,
      children
    });
  }, useStyledContext = function(scope) {
    var context = scope ? getOrCreateScopedContext(scope) : OGContext;
    return React.useContext(context);
  };
  return Context.Provider = Provider, Context.props = defaultValues, Context.context = OGContext, Context.useStyledContext = useStyledContext, Context;
}
export {
  createStyledContext
};
//# sourceMappingURL=createStyledContext.js.map
