import React from "react";
import { objectIdentityKey } from "./objectIdentityKey";
import { jsx } from "react/jsx-runtime";
function createStyledContext(defaultValues) {
  const OGContext = React.createContext(defaultValues), OGProvider = OGContext.Provider, Context = OGContext, scopedContexts = /* @__PURE__ */ new Map();
  function getOrCreateScopedContext(scope) {
    let ScopedContext = scopedContexts.get(scope);
    return ScopedContext || (ScopedContext = React.createContext(defaultValues), scopedContexts.set(scope, ScopedContext)), ScopedContext;
  }
  const Provider = ({
    children,
    scope,
    ...values
  }) => {
    const next = React.useMemo(() => ({
      // this ! is a workaround for ts error
      ...defaultValues,
      ...values
    }), [objectIdentityKey(values)]);
    let Provider2 = OGProvider;
    return scope && (Provider2 = getOrCreateScopedContext(scope).Provider), /* @__PURE__ */ jsx(Provider2, { value: next, children });
  }, useStyledContext = (scope) => {
    const context = scope ? getOrCreateScopedContext(scope) : OGContext;
    return React.useContext(context);
  };
  return Context.Provider = Provider, Context.props = defaultValues, Context.context = OGContext, Context.useStyledContext = useStyledContext, Context;
}
export {
  createStyledContext
};
//# sourceMappingURL=createStyledContext.js.map
