import { mergeIfNotShallowEqual } from "./createShallowSetState";
import { getMediaState } from "../hooks/useMedia";
var subscribeToContextGroup = function(param) {
  var { disabled = !1, setStateShallow, pseudoGroups, mediaGroups, componentContext, state } = param;
  if (pseudoGroups || mediaGroups) {
    var _componentContext_groups_subscribe, _componentContext_groups, current = {
      pseudo: {},
      media: {}
    };
    return process.env.NODE_ENV === "development" && !componentContext.groups && console.debug("No context group found"), (_componentContext_groups = componentContext.groups) === null || _componentContext_groups === void 0 || (_componentContext_groups_subscribe = _componentContext_groups.subscribe) === null || _componentContext_groups_subscribe === void 0 ? void 0 : _componentContext_groups_subscribe.call(_componentContext_groups, function(name, param2) {
      var { layout, pseudo } = param2;
      if (pseudo && pseudoGroups?.has(String(name)))
        Object.assign(current.pseudo, pseudo), persist();
      else if (layout && mediaGroups) {
        var mediaState = getMediaState(mediaGroups, layout), next = mergeIfNotShallowEqual(current.media, mediaState);
        next !== current.media && (Object.assign(current.media, next), persist());
      }
      function persist() {
        var group = {
          ...state.group,
          [name]: current
        };
        setStateShallow({
          group
        });
      }
    });
  }
};
export {
  subscribeToContextGroup
};
//# sourceMappingURL=subscribeToContextGroup.js.map
