import { isWeb } from "@tamagui/constants";
import { stylePropsAll, stylePropsUnitless } from "@tamagui/helpers";
import { getAllSelectors } from "./insertStyleRule";
var stylePropsAllPlusTransforms = {
  ...stylePropsAll,
  translateX: !0,
  translateY: !0
};
function normalizeValueWithProperty(value) {
  var property = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  if (!isWeb || stylePropsUnitless[property] || property && !stylePropsAllPlusTransforms[property] || typeof value == "boolean")
    return value;
  var res = value;
  return value && typeof value == "object" ? value : (typeof value == "number" ? res = `${value}px` : property && (res = `${res}`), res);
}
var rcache = {};
function reverseMapClassNameToValue(key, className) {
  var selectors = getAllSelectors(), cssRule = selectors[className];
  if (rcache[cssRule])
    return rcache[cssRule];
  if (!cssRule) {
    process.env.NODE_ENV === "development" && console.warn(`No CSS rule found for ${key} looking for selector ".${className}", you may not be injecting extracted CSS`);
    return;
  }
  var cssVal = cssRule.replace(/.*:/, "").replace(/;.*/, "").trim(), res;
  return cssVal.startsWith("var(") ? res = cssVal : stylePropsUnitless[key] ? res = +cssVal : cssVal.endsWith("px") ? res = +cssVal.replace("px", "") : res = cssVal, rcache[cssRule] = res, process.env.NODE_ENV === "development" && typeof res == "number" && Number.isNaN(res) && console.info("Tamagui invalid parsed value, NaN:", {
    res,
    cssVal,
    cssRule,
    key,
    className
  }), res;
}
export {
  normalizeValueWithProperty,
  reverseMapClassNameToValue
};
//# sourceMappingURL=normalizeValueWithProperty.js.map
