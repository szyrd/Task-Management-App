import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { Theme } from "../views/Theme";
function themeable(Component, staticConfig) {
  var withThemeComponent = /* @__PURE__ */ React.forwardRef(function(props, ref) {
    var { themeInverse, theme, componentName, themeReset, ...rest } = props, overriddenContextProps, context = staticConfig?.context;
    if (context)
      for (var key in context.props) {
        var val = props[key];
        val !== void 0 && (overriddenContextProps || (overriddenContextProps = {}), overriddenContextProps[key] = val);
      }
    var element = (
      // @ts-expect-error its ok
      /* @__PURE__ */ _jsx(Component, {
        ref,
        ...rest,
        "data-disable-theme": !0
      })
    ), filteredProps = {
      componentName: componentName || staticConfig?.componentName
    };
    "debug" in props && (filteredProps.debug = props.debug), "theme" in props && (filteredProps.name = props.theme), "themeInverse" in props && (filteredProps.inverse = props.themeInverse), "themeReset" in props && (filteredProps.reset = themeReset);
    var contents = /* @__PURE__ */ _jsx(Theme, {
      "disable-child-theme": !0,
      ...filteredProps,
      children: element
    });
    if (context) {
      var Provider = context.Provider, contextValue = React.useContext(context);
      contents = /* @__PURE__ */ _jsx(Provider, {
        ...contextValue,
        ...overriddenContextProps,
        children: contents
      });
    }
    return contents;
  }), withTheme = withThemeComponent;
  return withTheme.displayName = `Themed(${Component?.displayName || Component?.name || "Anonymous"})`, withTheme;
}
export {
  themeable
};
//# sourceMappingURL=themeable.js.map
