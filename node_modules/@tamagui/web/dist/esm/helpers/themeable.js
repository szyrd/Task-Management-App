import React from "react";
import { Theme } from "../views/Theme";
import { jsx } from "react/jsx-runtime";
function themeable(Component, staticConfig) {
  const withTheme = React.forwardRef(function(props, ref) {
    const { themeInverse, theme, componentName, themeReset, ...rest } = props;
    let overriddenContextProps;
    const context = staticConfig?.context;
    if (context)
      for (const key in context.props) {
        const val = props[key];
        val !== void 0 && (overriddenContextProps ||= {}, overriddenContextProps[key] = val);
      }
    const element = (
      // @ts-expect-error its ok
      /* @__PURE__ */ jsx(Component, { ref, ...rest, "data-disable-theme": !0 })
    ), filteredProps = {
      componentName: componentName || staticConfig?.componentName
    };
    "debug" in props && (filteredProps.debug = props.debug), "theme" in props && (filteredProps.name = props.theme), "themeInverse" in props && (filteredProps.inverse = props.themeInverse), "themeReset" in props && (filteredProps.reset = themeReset);
    let contents = /* @__PURE__ */ jsx(Theme, { "disable-child-theme": !0, ...filteredProps, children: element });
    if (context) {
      const Provider = context.Provider, contextValue = React.useContext(context);
      contents = /* @__PURE__ */ jsx(Provider, { ...contextValue, ...overriddenContextProps, children: contents });
    }
    return contents;
  });
  return withTheme.displayName = `Themed(${Component?.displayName || Component?.name || "Anonymous"})`, withTheme;
}
export {
  themeable
};
//# sourceMappingURL=themeable.js.map
