import { isWeb } from "@tamagui/constants";
import { configListeners, setConfig, setTokens } from "./config";
import { createVariables } from "./createVariables";
import { getThemeCSSRules } from "./helpers/getThemeCSSRules";
import { listenForSheetChanges, scanAllSheets } from "./helpers/insertStyleRule";
import { proxyThemesToParents } from "./helpers/proxyThemeToParents";
import { registerCSSVariable, variableToCSS } from "./helpers/registerCSSVariable";
import { ensureThemeVariable } from "./helpers/themes";
import { configureMedia } from "./hooks/useMedia";
import { parseFont } from "./insertFont";
import { Tamagui } from "./Tamagui";
var createdConfigs = /* @__PURE__ */ new WeakMap();
function createTamagui(configIn) {
  var _configIn_settings;
  if (createdConfigs.has(configIn))
    return configIn;
  var tokensParsed = {}, tokens = createVariables(configIn.tokens || {});
  if (configIn.tokens) {
    var tokensMerged = {};
    for (var cat in tokens) {
      tokensParsed[cat] = {}, tokensMerged[cat] = {};
      var tokenCat = tokens[cat];
      for (var key in tokenCat) {
        var val = tokenCat[key], prefixedKey = `$${key}`;
        tokensParsed[cat][prefixedKey] = val, tokensMerged[cat][prefixedKey] = val, tokensMerged[cat][key] = val;
      }
    }
    setTokens(tokensMerged);
  }
  var foundThemes;
  if (configIn.themes) {
    var noThemes = Object.keys(configIn.themes).length === 0;
    noThemes && (foundThemes = scanAllSheets(noThemes, tokensParsed)), process.env.TAMAGUI_REACT_19 && process.env.TAMAGUI_SKIP_THEME_OPTIMIZATION || noThemes && listenForSheetChanges();
  }
  var fontSizeTokens = null, fontsParsed;
  if (configIn.fonts) {
    var fontTokens = Object.fromEntries(Object.entries(configIn.fonts).map(function(param) {
      var [k, v] = param;
      return [
        k,
        createVariables(v, "f", !0)
      ];
    }));
    fontsParsed = function() {
      var res = {};
      for (var familyName in fontTokens) {
        var font = fontTokens[familyName], fontParsed = parseFont(font);
        res[`$${familyName}`] = fontParsed, !fontSizeTokens && fontParsed.size && (fontSizeTokens = new Set(Object.keys(fontParsed.size)));
      }
      return res;
    }();
  }
  var specificTokens = {}, themeConfig = function() {
    var cssRuleSets = [], declarations = [], fontDeclarations = {};
    for (var key2 in tokens)
      for (var skey in tokens[key2]) {
        var variable = tokens[key2][skey];
        if (specificTokens[`$${key2}.${skey}`] = variable, process.env.NODE_ENV === "development" && typeof variable > "u")
          throw new Error(`No value for tokens.${key2}.${skey}:
${JSON.stringify(variable, null, 2)}`);
        isWeb && (registerCSSVariable(variable), declarations.push(variableToCSS(variable, key2 === "zIndex")));
      }
    if (0) {
      var declarationsToRuleSet;
      for (var key1 in fontsParsed)
        var fontParsed, name, language, fontVars;
      var sep;
      if (fontDeclarations)
        for (var key22 in fontDeclarations)
          var name1, declarations1, language1, fontSelector, langSelector, selectors, specificRuleSet;
    }
    var themesIn = configIn.themes, dedupedThemes = foundThemes ?? getThemesDeduped(themesIn), themes = proxyThemesToParents(dedupedThemes);
    return {
      themes,
      cssRuleSets,
      getThemeRulesSets() {
        var themeRuleSets = [];
        if (isWeb) {
          var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
          try {
            for (var _iterator = dedupedThemes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
              var { names, theme } = _step.value, nextRules = getThemeCSSRules({
                config: configIn,
                themeName: names[0],
                names,
                theme
              });
              themeRuleSets = [
                ...themeRuleSets,
                ...nextRules
              ];
            }
          } catch (err) {
            _didIteratorError = !0, _iteratorError = err;
          } finally {
            try {
              !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
            } finally {
              if (_didIteratorError)
                throw _iteratorError;
            }
          }
        }
        return themeRuleSets;
      }
    };
  }(), shorthands = configIn.shorthands || {}, lastCSSInsertedRulesIndex = -1, getCSS = function() {
    var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (0) {
      var separator, sinceLastCall, exclude;
      if (sinceLastCall && lastCSSInsertedRulesIndex >= 0)
        var rules;
      var runtimeStyles, designSystem;
    } else
      return "";
  }, getNewCSS = function(opts) {
    return getCSS({
      ...opts,
      sinceLastCall: !0
    });
  }, _configIn_settings_defaultFont, defaultFontSetting = (_configIn_settings_defaultFont = (_configIn_settings = configIn.settings) === null || _configIn_settings === void 0 ? void 0 : _configIn_settings.defaultFont) !== null && _configIn_settings_defaultFont !== void 0 ? _configIn_settings_defaultFont : configIn.defaultFont, defaultFont = function() {
    var val2 = defaultFontSetting;
    return val2?.[0] === "$" && (val2 = val2.slice(1)), val2;
  }(), defaultFontToken = defaultFont ? `$${defaultFont}` : "", unset = {
    ...configIn.unset
  };
  !unset.fontFamily && defaultFont && (unset.fontFamily = defaultFontToken);
  var config = {
    fonts: {},
    onlyAllowShorthands: !1,
    fontLanguages: [],
    animations: {},
    media: {},
    ...configIn,
    unset,
    settings: {
      // move deprecated settings here so we can reference them all using `getSetting`
      // TODO remove this on v2
      disableSSR: configIn.disableSSR,
      defaultFont: configIn.defaultFont,
      disableRootThemeClass: configIn.disableRootThemeClass,
      onlyAllowShorthands: configIn.onlyAllowShorthands,
      mediaQueryDefaultActive: configIn.mediaQueryDefaultActive,
      themeClassNameOnRoot: configIn.themeClassNameOnRoot,
      cssStyleSeparator: configIn.cssStyleSeparator,
      webContainerType: "inline-size",
      ...configIn.settings
    },
    tokens,
    // vite made this into a function if it wasn't set
    shorthands,
    inverseShorthands: shorthands ? Object.fromEntries(Object.entries(shorthands).map(function(param) {
      var [k, v] = param;
      return [
        v,
        k
      ];
    })) : {},
    themes: themeConfig.themes,
    fontsParsed: fontsParsed || {},
    themeConfig,
    tokensParsed,
    parsed: !0,
    getNewCSS,
    getCSS,
    defaultFont,
    fontSizeTokens: fontSizeTokens || /* @__PURE__ */ new Set(),
    specificTokens,
    defaultFontToken
  };
  if (setConfig(config), configureMedia(config), createdConfigs.set(config, !0), configListeners.size && (configListeners.forEach(function(cb) {
    return cb(config);
  }), configListeners.clear()), process.env.NODE_ENV === "development") {
    var _process_env_DEBUG;
    !((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.startsWith("tamagui") && console.info("Tamagui config:", config), globalThis.Tamagui || (globalThis.Tamagui = Tamagui);
  }
  return config;
}
function getThemesDeduped(themes) {
  var dedupedThemes = [], existing = /* @__PURE__ */ new Map();
  for (var themeName in themes) {
    var darkOrLightSpecificPrefix = themeName.startsWith("dark") ? "dark" : themeName.startsWith("light") ? "light" : "", rawTheme = themes[themeName], key = darkOrLightSpecificPrefix + JSON.stringify(rawTheme);
    if (existing.has(key)) {
      var e = existing.get(key);
      e.names.push(themeName);
      continue;
    }
    var theme = {
      ...rawTheme
    };
    for (var key1 in theme)
      ensureThemeVariable(theme, key1);
    var deduped = {
      names: [
        themeName
      ],
      theme
    };
    dedupedThemes.push(deduped), existing.set(key, deduped);
  }
  return dedupedThemes;
}
export {
  createTamagui
};
//# sourceMappingURL=createTamagui.js.map
