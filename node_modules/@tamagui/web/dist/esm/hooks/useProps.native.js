import React from "react";
import { getConfig } from "../config";
import { ComponentContext } from "../contexts/ComponentContext";
import { useSplitStyles } from "../helpers/getSplitStyles";
import { subscribeToContextGroup } from "../helpers/subscribeToContextGroup";
import { Stack } from "../views/Stack";
import { useComponentState } from "./useComponentState";
import { useMedia } from "./useMedia";
import { useThemeWithState } from "./useTheme";
function useProps(props, opts) {
  var [propsOut, styleOut] = usePropsAndStyle(props, {
    ...opts,
    noExpand: !0,
    noNormalize: !0,
    resolveValues: "none"
  });
  return {
    ...propsOut,
    ...styleOut
  };
}
function useStyle(props, opts) {
  return usePropsAndStyle(props, opts)[1] || {};
}
function usePropsAndStyle(props, opts) {
  var _opts_forComponent, _themeState_state, _opts_forComponent_staticConfig, staticConfig = (_opts_forComponent_staticConfig = opts == null || (_opts_forComponent = opts.forComponent) === null || _opts_forComponent === void 0 ? void 0 : _opts_forComponent.staticConfig) !== null && _opts_forComponent_staticConfig !== void 0 ? _opts_forComponent_staticConfig : Stack.staticConfig, [themeState, theme] = useThemeWithState({
    componentName: staticConfig.componentName,
    name: "theme" in props ? props.theme : void 0,
    inverse: "themeInverse" in props ? props.themeInverse : void 0
  }), componentContext = React.useContext(ComponentContext), { state, disabled, setStateShallow } = useComponentState(props, componentContext, staticConfig, getConfig()), mediaState = useMedia(), splitStyles = useSplitStyles(props, staticConfig, theme, ((_themeState_state = themeState.state) === null || _themeState_state === void 0 ? void 0 : _themeState_state.name) || "", state, {
    isAnimated: !1,
    mediaState,
    noSkip: !0,
    noMergeStyle: !0,
    noClass: !0,
    resolveValues: "auto",
    ...opts
  }, null, componentContext), { mediaGroups, pseudoGroups } = splitStyles;
  return React.useEffect(function() {
    if (!disabled) {
      if (state.unmounted) {
        setStateShallow({
          unmounted: !1
        });
        return;
      }
      return subscribeToContextGroup({
        disabled,
        componentContext,
        setStateShallow,
        state,
        mediaGroups,
        pseudoGroups
      });
    }
  }, [
    disabled,
    pseudoGroups ? Object.keys([
      ...pseudoGroups
    ]).join("") : 0,
    mediaGroups ? Object.keys([
      ...mediaGroups
    ]).join("") : 0
  ]), [
    splitStyles.viewProps,
    splitStyles.style || {},
    theme,
    mediaState
  ];
}
export {
  useProps,
  usePropsAndStyle,
  useStyle
};
//# sourceMappingURL=useProps.js.map
