import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { composeRefs } from "@tamagui/compose-refs";
import { ScrollView } from "@tamagui/scroll-view";
import { useSheetContext } from "./SheetContext";
var SHEET_SCROLL_VIEW_NAME = "SheetScrollView", SheetScrollView = /* @__PURE__ */ React.forwardRef(function(param, ref) {
  var { __scopeSheet, children, onScroll, ...props } = param, context = useSheetContext(SHEET_SCROLL_VIEW_NAME, __scopeSheet), { scrollBridge } = context, scrollRef = React.useRef(null), state = React.useRef({
    lastPageY: 0,
    dragAt: 0,
    dys: [],
    // store a few recent dys to get velocity on release
    isScrolling: !1,
    isDragging: !1
  }), release = function() {
    if (state.current.isDragging) {
      state.current.isDragging = !1, scrollBridge.scrollStartY = -1, state.current.isScrolling = !1;
      var vy = 0;
      if (state.current.dys.length) {
        var recentDys = state.current.dys.slice(-10), dist = recentDys.length ? recentDys.reduce(function(a, b) {
          return a + b;
        }, 0) : 0, avgDy = dist / recentDys.length;
        vy = avgDy * 0.04;
      }
      state.current.dys = [], scrollBridge.release({
        dragAt: state.current.dragAt,
        vy
      });
    }
  };
  return /* @__PURE__ */ _jsx(ScrollView, {
    ref: composeRefs(scrollRef, ref),
    flex: 1,
    scrollEventThrottle: 8,
    onResponderRelease: release,
    className: "_ovs-contain",
    // scrollEnabled={scrollEnabled}
    onScroll: function(e) {
      var { y } = e.nativeEvent.contentOffset;
      scrollBridge.y = y, y > 0 && (scrollBridge.scrollStartY = -1), onScroll == null || onScroll(e);
    },
    // This assures that we do not skip the "scrollBridge" values processing
    // when passing this prop into a <Sheet.ScrollView /> overriding it here
    // Useful when using this ScrollView with lists such as "FlashList", i.e.
    // ```
    // renderScrollComponent={Sheet.ScrollView}
    // ```
    onStartShouldSetResponder: function() {
      return scrollBridge.scrollStartY = -1, state.current.isDragging = !0, !0;
    },
    // setting to false while onResponderMove is disabled
    onMoveShouldSetResponder: function() {
      return !1;
    },
    // somehow disabling works better, regression, no more nice drag continue scroll
    // onResponderMove={(e) => {
    //   const { pageY } = e.nativeEvent
    //   if (state.current.isScrolling) {
    //     return
    //   }
    //   if (scrollBridge.scrollStartY === -1) {
    //     scrollBridge.scrollStartY = pageY
    //     state.current.lastPageY = pageY
    //   }
    //   const dragAt = pageY - scrollBridge.scrollStartY
    //   const dy = pageY - state.current.lastPageY
    //   state.current.lastPageY = pageY // after dy
    //   const isDraggingUp = dy < 0
    //   const isPaneAtTop = scrollBridge.paneY <= scrollBridge.paneMinY
    //   if ((dy === 0 || isDraggingUp) && isPaneAtTop) {
    //     state.current.isScrolling = true
    //     setScrollEnabled(true)
    //     return
    //   }
    //   setScrollEnabled(false)
    //   scrollBridge.drag(dragAt)
    //   state.current.dragAt = dragAt
    //   state.current.dys.push(dy)
    //   // only do every so often, cut down to 10 again
    //   if (state.current.dys.length > 100) {
    //     state.current.dys = state.current.dys.slice(-10)
    //   }
    // }}
    ...props,
    children
  });
});
export {
  SheetScrollView
};
//# sourceMappingURL=SheetScrollView.js.map
